
ECE455_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015e0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .init_array   00000004  08001770  08001770  00011770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .fini_array   00000004  08001774  08001774  00011774  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         00000024  20000000  08001778  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .ccmram       00000000  10000000  10000000  00020024  2**0
                  CONTENTS
  6 .bss          00000124  20000024  20000024  00020024  2**2
                  ALLOC
  7 ._user_heap_stack 00000400  20000148  20000148  00020024  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020024  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000aa86  00000000  00000000  00020052  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001b8e  00000000  00000000  0002aad8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000ac8  00000000  00000000  0002c668  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000009d0  00000000  00000000  0002d130  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   000043c1  00000000  00000000  0002db00  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003c81  00000000  00000000  00031ec1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .comment      0000007c  00000000  00000000  00035b42  2**0
                  CONTENTS, READONLY
 16 .debug_frame  00002c60  00000000  00000000  00035bc0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000024 	.word	0x20000024
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001758 	.word	0x08001758

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000028 	.word	0x20000028
 80001cc:	08001758 	.word	0x08001758

080001d0 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80001d0:	b480      	push	{r7}
 80001d2:	b085      	sub	sp, #20
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
 80001d8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80001da:	687b      	ldr	r3, [r7, #4]
 80001dc:	685b      	ldr	r3, [r3, #4]
 80001de:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80001e0:	683b      	ldr	r3, [r7, #0]
 80001e2:	68fa      	ldr	r2, [r7, #12]
 80001e4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80001e6:	68fb      	ldr	r3, [r7, #12]
 80001e8:	689a      	ldr	r2, [r3, #8]
 80001ea:	683b      	ldr	r3, [r7, #0]
 80001ec:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80001ee:	68fb      	ldr	r3, [r7, #12]
 80001f0:	689b      	ldr	r3, [r3, #8]
 80001f2:	683a      	ldr	r2, [r7, #0]
 80001f4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	683a      	ldr	r2, [r7, #0]
 80001fa:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80001fc:	683b      	ldr	r3, [r7, #0]
 80001fe:	687a      	ldr	r2, [r7, #4]
 8000200:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000202:	687b      	ldr	r3, [r7, #4]
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	1c5a      	adds	r2, r3, #1
 8000208:	687b      	ldr	r3, [r7, #4]
 800020a:	601a      	str	r2, [r3, #0]
}
 800020c:	bf00      	nop
 800020e:	3714      	adds	r7, #20
 8000210:	46bd      	mov	sp, r7
 8000212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000216:	4770      	bx	lr

08000218 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	691b      	ldr	r3, [r3, #16]
 8000224:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	685b      	ldr	r3, [r3, #4]
 800022a:	687a      	ldr	r2, [r7, #4]
 800022c:	6892      	ldr	r2, [r2, #8]
 800022e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	689b      	ldr	r3, [r3, #8]
 8000234:	687a      	ldr	r2, [r7, #4]
 8000236:	6852      	ldr	r2, [r2, #4]
 8000238:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800023a:	68fb      	ldr	r3, [r7, #12]
 800023c:	685a      	ldr	r2, [r3, #4]
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	429a      	cmp	r2, r3
 8000242:	d103      	bne.n	800024c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	689a      	ldr	r2, [r3, #8]
 8000248:	68fb      	ldr	r3, [r7, #12]
 800024a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800024c:	687b      	ldr	r3, [r7, #4]
 800024e:	2200      	movs	r2, #0
 8000250:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000252:	68fb      	ldr	r3, [r7, #12]
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	1e5a      	subs	r2, r3, #1
 8000258:	68fb      	ldr	r3, [r7, #12]
 800025a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800025c:	68fb      	ldr	r3, [r7, #12]
 800025e:	681b      	ldr	r3, [r3, #0]
}
 8000260:	4618      	mov	r0, r3
 8000262:	3714      	adds	r7, #20
 8000264:	46bd      	mov	sp, r7
 8000266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026a:	4770      	bx	lr
 800026c:	0000      	movs	r0, r0
	...

08000270 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8000270:	4b07      	ldr	r3, [pc, #28]	; (8000290 <pxCurrentTCBConst2>)
 8000272:	6819      	ldr	r1, [r3, #0]
 8000274:	6808      	ldr	r0, [r1, #0]
 8000276:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800027a:	f380 8809 	msr	PSP, r0
 800027e:	f3bf 8f6f 	isb	sy
 8000282:	f04f 0000 	mov.w	r0, #0
 8000286:	f380 8811 	msr	BASEPRI, r0
 800028a:	4770      	bx	lr
 800028c:	f3af 8000 	nop.w

08000290 <pxCurrentTCBConst2>:
 8000290:	20000040 	.word	0x20000040
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8000294:	bf00      	nop
 8000296:	bf00      	nop
	...

080002a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80002a0:	f3ef 8009 	mrs	r0, PSP
 80002a4:	f3bf 8f6f 	isb	sy
 80002a8:	4b15      	ldr	r3, [pc, #84]	; (8000300 <pxCurrentTCBConst>)
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	f01e 0f10 	tst.w	lr, #16
 80002b0:	bf08      	it	eq
 80002b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80002b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002ba:	6010      	str	r0, [r2, #0]
 80002bc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 80002c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80002c4:	f380 8811 	msr	BASEPRI, r0
 80002c8:	f3bf 8f4f 	dsb	sy
 80002cc:	f3bf 8f6f 	isb	sy
 80002d0:	f000 f8f6 	bl	80004c0 <vTaskSwitchContext>
 80002d4:	f04f 0000 	mov.w	r0, #0
 80002d8:	f380 8811 	msr	BASEPRI, r0
 80002dc:	bc08      	pop	{r3}
 80002de:	6819      	ldr	r1, [r3, #0]
 80002e0:	6808      	ldr	r0, [r1, #0]
 80002e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002e6:	f01e 0f10 	tst.w	lr, #16
 80002ea:	bf08      	it	eq
 80002ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80002f0:	f380 8809 	msr	PSP, r0
 80002f4:	f3bf 8f6f 	isb	sy
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	f3af 8000 	nop.w

08000300 <pxCurrentTCBConst>:
 8000300:	20000040 	.word	0x20000040
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8000304:	bf00      	nop
 8000306:	bf00      	nop

08000308 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b082      	sub	sp, #8
 800030c:	af00      	add	r7, sp, #0

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800030e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000312:	f383 8811 	msr	BASEPRI, r3
 8000316:	f3bf 8f6f 	isb	sy
 800031a:	f3bf 8f4f 	dsb	sy
 800031e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8000320:	f000 f812 	bl	8000348 <xTaskIncrementTick>
 8000324:	4603      	mov	r3, r0
 8000326:	2b00      	cmp	r3, #0
 8000328:	d003      	beq.n	8000332 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <SysTick_Handler+0x3c>)
 800032c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000330:	601a      	str	r2, [r3, #0]
 8000332:	2300      	movs	r3, #0
 8000334:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8000336:	683b      	ldr	r3, [r7, #0]
 8000338:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800033c:	bf00      	nop
 800033e:	3708      	adds	r7, #8
 8000340:	46bd      	mov	sp, r7
 8000342:	bd80      	pop	{r7, pc}
 8000344:	e000ed04 	.word	0xe000ed04

08000348 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b086      	sub	sp, #24
 800034c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800034e:	2300      	movs	r3, #0
 8000350:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000352:	4b50      	ldr	r3, [pc, #320]	; (8000494 <xTaskIncrementTick+0x14c>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	2b00      	cmp	r3, #0
 8000358:	f040 808c 	bne.w	8000474 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 800035c:	4b4e      	ldr	r3, [pc, #312]	; (8000498 <xTaskIncrementTick+0x150>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	3301      	adds	r3, #1
 8000362:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8000364:	4a4c      	ldr	r2, [pc, #304]	; (8000498 <xTaskIncrementTick+0x150>)
 8000366:	693b      	ldr	r3, [r7, #16]
 8000368:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 800036a:	693b      	ldr	r3, [r7, #16]
 800036c:	2b00      	cmp	r3, #0
 800036e:	d11f      	bne.n	80003b0 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8000370:	4b4a      	ldr	r3, [pc, #296]	; (800049c <xTaskIncrementTick+0x154>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	2b00      	cmp	r3, #0
 8000378:	d009      	beq.n	800038e <xTaskIncrementTick+0x46>
	__asm volatile
 800037a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800037e:	f383 8811 	msr	BASEPRI, r3
 8000382:	f3bf 8f6f 	isb	sy
 8000386:	f3bf 8f4f 	dsb	sy
 800038a:	603b      	str	r3, [r7, #0]
 800038c:	e7fe      	b.n	800038c <xTaskIncrementTick+0x44>
 800038e:	4b43      	ldr	r3, [pc, #268]	; (800049c <xTaskIncrementTick+0x154>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	60fb      	str	r3, [r7, #12]
 8000394:	4b42      	ldr	r3, [pc, #264]	; (80004a0 <xTaskIncrementTick+0x158>)
 8000396:	681b      	ldr	r3, [r3, #0]
 8000398:	4a40      	ldr	r2, [pc, #256]	; (800049c <xTaskIncrementTick+0x154>)
 800039a:	6013      	str	r3, [r2, #0]
 800039c:	4a40      	ldr	r2, [pc, #256]	; (80004a0 <xTaskIncrementTick+0x158>)
 800039e:	68fb      	ldr	r3, [r7, #12]
 80003a0:	6013      	str	r3, [r2, #0]
 80003a2:	4b40      	ldr	r3, [pc, #256]	; (80004a4 <xTaskIncrementTick+0x15c>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	3301      	adds	r3, #1
 80003a8:	4a3e      	ldr	r2, [pc, #248]	; (80004a4 <xTaskIncrementTick+0x15c>)
 80003aa:	6013      	str	r3, [r2, #0]
 80003ac:	f000 f908 	bl	80005c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80003b0:	4b3d      	ldr	r3, [pc, #244]	; (80004a8 <xTaskIncrementTick+0x160>)
 80003b2:	681b      	ldr	r3, [r3, #0]
 80003b4:	693a      	ldr	r2, [r7, #16]
 80003b6:	429a      	cmp	r2, r3
 80003b8:	d34d      	bcc.n	8000456 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80003ba:	4b38      	ldr	r3, [pc, #224]	; (800049c <xTaskIncrementTick+0x154>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	681b      	ldr	r3, [r3, #0]
 80003c0:	2b00      	cmp	r3, #0
 80003c2:	d101      	bne.n	80003c8 <xTaskIncrementTick+0x80>
 80003c4:	2301      	movs	r3, #1
 80003c6:	e000      	b.n	80003ca <xTaskIncrementTick+0x82>
 80003c8:	2300      	movs	r3, #0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d004      	beq.n	80003d8 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80003ce:	4b36      	ldr	r3, [pc, #216]	; (80004a8 <xTaskIncrementTick+0x160>)
 80003d0:	f04f 32ff 	mov.w	r2, #4294967295
 80003d4:	601a      	str	r2, [r3, #0]
					break;
 80003d6:	e03e      	b.n	8000456 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80003d8:	4b30      	ldr	r3, [pc, #192]	; (800049c <xTaskIncrementTick+0x154>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	68db      	ldr	r3, [r3, #12]
 80003de:	68db      	ldr	r3, [r3, #12]
 80003e0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	685b      	ldr	r3, [r3, #4]
 80003e6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80003e8:	693a      	ldr	r2, [r7, #16]
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	d203      	bcs.n	80003f8 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80003f0:	4a2d      	ldr	r2, [pc, #180]	; (80004a8 <xTaskIncrementTick+0x160>)
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	6013      	str	r3, [r2, #0]
						break;
 80003f6:	e02e      	b.n	8000456 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	3304      	adds	r3, #4
 80003fc:	4618      	mov	r0, r3
 80003fe:	f7ff ff0b 	bl	8000218 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8000402:	68bb      	ldr	r3, [r7, #8]
 8000404:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000406:	2b00      	cmp	r3, #0
 8000408:	d004      	beq.n	8000414 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800040a:	68bb      	ldr	r3, [r7, #8]
 800040c:	3318      	adds	r3, #24
 800040e:	4618      	mov	r0, r3
 8000410:	f7ff ff02 	bl	8000218 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8000414:	68bb      	ldr	r3, [r7, #8]
 8000416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000418:	2201      	movs	r2, #1
 800041a:	409a      	lsls	r2, r3
 800041c:	4b23      	ldr	r3, [pc, #140]	; (80004ac <xTaskIncrementTick+0x164>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4313      	orrs	r3, r2
 8000422:	4a22      	ldr	r2, [pc, #136]	; (80004ac <xTaskIncrementTick+0x164>)
 8000424:	6013      	str	r3, [r2, #0]
 8000426:	68bb      	ldr	r3, [r7, #8]
 8000428:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800042a:	4613      	mov	r3, r2
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	4413      	add	r3, r2
 8000430:	009b      	lsls	r3, r3, #2
 8000432:	4a1f      	ldr	r2, [pc, #124]	; (80004b0 <xTaskIncrementTick+0x168>)
 8000434:	441a      	add	r2, r3
 8000436:	68bb      	ldr	r3, [r7, #8]
 8000438:	3304      	adds	r3, #4
 800043a:	4619      	mov	r1, r3
 800043c:	4610      	mov	r0, r2
 800043e:	f7ff fec7 	bl	80001d0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000442:	68bb      	ldr	r3, [r7, #8]
 8000444:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000446:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <xTaskIncrementTick+0x16c>)
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800044c:	429a      	cmp	r2, r3
 800044e:	d3b4      	bcc.n	80003ba <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8000450:	2301      	movs	r3, #1
 8000452:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8000454:	e7b1      	b.n	80003ba <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8000456:	4b17      	ldr	r3, [pc, #92]	; (80004b4 <xTaskIncrementTick+0x16c>)
 8000458:	681b      	ldr	r3, [r3, #0]
 800045a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800045c:	4914      	ldr	r1, [pc, #80]	; (80004b0 <xTaskIncrementTick+0x168>)
 800045e:	4613      	mov	r3, r2
 8000460:	009b      	lsls	r3, r3, #2
 8000462:	4413      	add	r3, r2
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	440b      	add	r3, r1
 8000468:	681b      	ldr	r3, [r3, #0]
 800046a:	2b01      	cmp	r3, #1
 800046c:	d907      	bls.n	800047e <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 800046e:	2301      	movs	r3, #1
 8000470:	617b      	str	r3, [r7, #20]
 8000472:	e004      	b.n	800047e <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8000474:	4b10      	ldr	r3, [pc, #64]	; (80004b8 <xTaskIncrementTick+0x170>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	3301      	adds	r3, #1
 800047a:	4a0f      	ldr	r2, [pc, #60]	; (80004b8 <xTaskIncrementTick+0x170>)
 800047c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800047e:	4b0f      	ldr	r3, [pc, #60]	; (80004bc <xTaskIncrementTick+0x174>)
 8000480:	681b      	ldr	r3, [r3, #0]
 8000482:	2b00      	cmp	r3, #0
 8000484:	d001      	beq.n	800048a <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8000486:	2301      	movs	r3, #1
 8000488:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800048a:	697b      	ldr	r3, [r7, #20]
}
 800048c:	4618      	mov	r0, r3
 800048e:	3718      	adds	r7, #24
 8000490:	46bd      	mov	sp, r7
 8000492:	bd80      	pop	{r7, pc}
 8000494:	200000c8 	.word	0x200000c8
 8000498:	200000b0 	.word	0x200000b0
 800049c:	200000a8 	.word	0x200000a8
 80004a0:	200000ac 	.word	0x200000ac
 80004a4:	200000c0 	.word	0x200000c0
 80004a8:	200000c4 	.word	0x200000c4
 80004ac:	200000b4 	.word	0x200000b4
 80004b0:	20000044 	.word	0x20000044
 80004b4:	20000040 	.word	0x20000040
 80004b8:	200000b8 	.word	0x200000b8
 80004bc:	200000bc 	.word	0x200000bc

080004c0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b088      	sub	sp, #32
 80004c4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80004c6:	4b39      	ldr	r3, [pc, #228]	; (80005ac <vTaskSwitchContext+0xec>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d003      	beq.n	80004d6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80004ce:	4b38      	ldr	r3, [pc, #224]	; (80005b0 <vTaskSwitchContext+0xf0>)
 80004d0:	2201      	movs	r2, #1
 80004d2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80004d4:	e065      	b.n	80005a2 <vTaskSwitchContext+0xe2>
		xYieldPending = pdFALSE;
 80004d6:	4b36      	ldr	r3, [pc, #216]	; (80005b0 <vTaskSwitchContext+0xf0>)
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 80004dc:	4b35      	ldr	r3, [pc, #212]	; (80005b4 <vTaskSwitchContext+0xf4>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e2:	61fb      	str	r3, [r7, #28]
 80004e4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 80004e8:	61bb      	str	r3, [r7, #24]
 80004ea:	69fb      	ldr	r3, [r7, #28]
 80004ec:	681a      	ldr	r2, [r3, #0]
 80004ee:	69bb      	ldr	r3, [r7, #24]
 80004f0:	429a      	cmp	r2, r3
 80004f2:	d111      	bne.n	8000518 <vTaskSwitchContext+0x58>
 80004f4:	69fb      	ldr	r3, [r7, #28]
 80004f6:	3304      	adds	r3, #4
 80004f8:	681a      	ldr	r2, [r3, #0]
 80004fa:	69bb      	ldr	r3, [r7, #24]
 80004fc:	429a      	cmp	r2, r3
 80004fe:	d10b      	bne.n	8000518 <vTaskSwitchContext+0x58>
 8000500:	69fb      	ldr	r3, [r7, #28]
 8000502:	3308      	adds	r3, #8
 8000504:	681a      	ldr	r2, [r3, #0]
 8000506:	69bb      	ldr	r3, [r7, #24]
 8000508:	429a      	cmp	r2, r3
 800050a:	d105      	bne.n	8000518 <vTaskSwitchContext+0x58>
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	330c      	adds	r3, #12
 8000510:	681a      	ldr	r2, [r3, #0]
 8000512:	69bb      	ldr	r3, [r7, #24]
 8000514:	429a      	cmp	r2, r3
 8000516:	d008      	beq.n	800052a <vTaskSwitchContext+0x6a>
 8000518:	4b26      	ldr	r3, [pc, #152]	; (80005b4 <vTaskSwitchContext+0xf4>)
 800051a:	681a      	ldr	r2, [r3, #0]
 800051c:	4b25      	ldr	r3, [pc, #148]	; (80005b4 <vTaskSwitchContext+0xf4>)
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	3334      	adds	r3, #52	; 0x34
 8000522:	4619      	mov	r1, r3
 8000524:	4610      	mov	r0, r2
 8000526:	f000 fc87 	bl	8000e38 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
 800052a:	4b23      	ldr	r3, [pc, #140]	; (80005b8 <vTaskSwitchContext+0xf8>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	fab3 f383 	clz	r3, r3
 8000536:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8000538:	7afb      	ldrb	r3, [r7, #11]
 800053a:	f1c3 031f 	rsb	r3, r3, #31
 800053e:	617b      	str	r3, [r7, #20]
 8000540:	491e      	ldr	r1, [pc, #120]	; (80005bc <vTaskSwitchContext+0xfc>)
 8000542:	697a      	ldr	r2, [r7, #20]
 8000544:	4613      	mov	r3, r2
 8000546:	009b      	lsls	r3, r3, #2
 8000548:	4413      	add	r3, r2
 800054a:	009b      	lsls	r3, r3, #2
 800054c:	440b      	add	r3, r1
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d109      	bne.n	8000568 <vTaskSwitchContext+0xa8>
	__asm volatile
 8000554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000558:	f383 8811 	msr	BASEPRI, r3
 800055c:	f3bf 8f6f 	isb	sy
 8000560:	f3bf 8f4f 	dsb	sy
 8000564:	607b      	str	r3, [r7, #4]
 8000566:	e7fe      	b.n	8000566 <vTaskSwitchContext+0xa6>
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	4613      	mov	r3, r2
 800056c:	009b      	lsls	r3, r3, #2
 800056e:	4413      	add	r3, r2
 8000570:	009b      	lsls	r3, r3, #2
 8000572:	4a12      	ldr	r2, [pc, #72]	; (80005bc <vTaskSwitchContext+0xfc>)
 8000574:	4413      	add	r3, r2
 8000576:	613b      	str	r3, [r7, #16]
 8000578:	693b      	ldr	r3, [r7, #16]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	685a      	ldr	r2, [r3, #4]
 800057e:	693b      	ldr	r3, [r7, #16]
 8000580:	605a      	str	r2, [r3, #4]
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	685a      	ldr	r2, [r3, #4]
 8000586:	693b      	ldr	r3, [r7, #16]
 8000588:	3308      	adds	r3, #8
 800058a:	429a      	cmp	r2, r3
 800058c:	d104      	bne.n	8000598 <vTaskSwitchContext+0xd8>
 800058e:	693b      	ldr	r3, [r7, #16]
 8000590:	685b      	ldr	r3, [r3, #4]
 8000592:	685a      	ldr	r2, [r3, #4]
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	605a      	str	r2, [r3, #4]
 8000598:	693b      	ldr	r3, [r7, #16]
 800059a:	685b      	ldr	r3, [r3, #4]
 800059c:	68db      	ldr	r3, [r3, #12]
 800059e:	4a05      	ldr	r2, [pc, #20]	; (80005b4 <vTaskSwitchContext+0xf4>)
 80005a0:	6013      	str	r3, [r2, #0]
}
 80005a2:	bf00      	nop
 80005a4:	3720      	adds	r7, #32
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	200000c8 	.word	0x200000c8
 80005b0:	200000bc 	.word	0x200000bc
 80005b4:	20000040 	.word	0x20000040
 80005b8:	200000b4 	.word	0x200000b4
 80005bc:	20000044 	.word	0x20000044

080005c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80005c6:	4b0f      	ldr	r3, [pc, #60]	; (8000604 <prvResetNextTaskUnblockTime+0x44>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d101      	bne.n	80005d4 <prvResetNextTaskUnblockTime+0x14>
 80005d0:	2301      	movs	r3, #1
 80005d2:	e000      	b.n	80005d6 <prvResetNextTaskUnblockTime+0x16>
 80005d4:	2300      	movs	r3, #0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d004      	beq.n	80005e4 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80005da:	4b0b      	ldr	r3, [pc, #44]	; (8000608 <prvResetNextTaskUnblockTime+0x48>)
 80005dc:	f04f 32ff 	mov.w	r2, #4294967295
 80005e0:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80005e2:	e008      	b.n	80005f6 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80005e4:	4b07      	ldr	r3, [pc, #28]	; (8000604 <prvResetNextTaskUnblockTime+0x44>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	68db      	ldr	r3, [r3, #12]
 80005ec:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	685b      	ldr	r3, [r3, #4]
 80005f2:	4a05      	ldr	r2, [pc, #20]	; (8000608 <prvResetNextTaskUnblockTime+0x48>)
 80005f4:	6013      	str	r3, [r2, #0]
}
 80005f6:	bf00      	nop
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop
 8000604:	200000a8 	.word	0x200000a8
 8000608:	200000c4 	.word	0x200000c4

0800060c <ADC_Init>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure that contains
  *         the configuration information for the specified ADC peripheral.
  * @retval None
  */
void ADC_Init(ADC_TypeDef* ADCx, ADC_InitTypeDef* ADC_InitStruct)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
 8000614:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1 = 0;
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
  uint8_t tmpreg2 = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	72fb      	strb	r3, [r7, #11]
  assert_param(IS_ADC_DATA_ALIGN(ADC_InitStruct->ADC_DataAlign)); 
  assert_param(IS_ADC_REGULAR_LENGTH(ADC_InitStruct->ADC_NbrOfConversion));
  
  /*---------------------------- ADCx CR1 Configuration -----------------*/
  /* Get the ADCx CR1 value */
  tmpreg1 = ADCx->CR1;
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	685b      	ldr	r3, [r3, #4]
 8000622:	60fb      	str	r3, [r7, #12]
  
  /* Clear RES and SCAN bits */
  tmpreg1 &= CR1_CLEAR_MASK;
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 800062a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800062e:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: scan conversion mode and resolution */
  /* Set SCAN bit according to ADC_ScanConvMode value */
  /* Set RES bit according to ADC_Resolution value */ 
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	021a      	lsls	r2, r3, #8
                                   ADC_InitStruct->ADC_Resolution);
 8000636:	683b      	ldr	r3, [r7, #0]
 8000638:	681b      	ldr	r3, [r3, #0]
  tmpreg1 |= (uint32_t)(((uint32_t)ADC_InitStruct->ADC_ScanConvMode << 8) | \
 800063a:	4313      	orrs	r3, r2
 800063c:	68fa      	ldr	r2, [r7, #12]
 800063e:	4313      	orrs	r3, r2
 8000640:	60fb      	str	r3, [r7, #12]
  /* Write to ADCx CR1 */
  ADCx->CR1 = tmpreg1;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	605a      	str	r2, [r3, #4]
  /*---------------------------- ADCx CR2 Configuration -----------------*/
  /* Get the ADCx CR2 value */
  tmpreg1 = ADCx->CR2;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	60fb      	str	r3, [r7, #12]
  
  /* Clear CONT, ALIGN, EXTEN and EXTSEL bits */
  tmpreg1 &= CR2_CLEAR_MASK;
 800064e:	68fa      	ldr	r2, [r7, #12]
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <ADC_Init+0xa8>)
 8000652:	4013      	ands	r3, r2
 8000654:	60fb      	str	r3, [r7, #12]
     continuous conversion mode */
  /* Set ALIGN bit according to ADC_DataAlign value */
  /* Set EXTEN bits according to ADC_ExternalTrigConvEdge value */ 
  /* Set EXTSEL bits according to ADC_ExternalTrigConv value */
  /* Set CONT bit according to ADC_ContinuousConvMode value */
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 8000656:	683b      	ldr	r3, [r7, #0]
 8000658:	691a      	ldr	r2, [r3, #16]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	68db      	ldr	r3, [r3, #12]
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800065e:	431a      	orrs	r2, r3
                        ADC_InitStruct->ADC_ExternalTrigConvEdge | \
 8000660:	683b      	ldr	r3, [r7, #0]
 8000662:	689b      	ldr	r3, [r3, #8]
                        ADC_InitStruct->ADC_ExternalTrigConv | 
 8000664:	431a      	orrs	r2, r3
                        ((uint32_t)ADC_InitStruct->ADC_ContinuousConvMode << 1));
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	795b      	ldrb	r3, [r3, #5]
 800066a:	005b      	lsls	r3, r3, #1
  tmpreg1 |= (uint32_t)(ADC_InitStruct->ADC_DataAlign | \
 800066c:	4313      	orrs	r3, r2
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	4313      	orrs	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
                        
  /* Write to ADCx CR2 */
  ADCx->CR2 = tmpreg1;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	68fa      	ldr	r2, [r7, #12]
 8000678:	609a      	str	r2, [r3, #8]
  /*---------------------------- ADCx SQR1 Configuration -----------------*/
  /* Get the ADCx SQR1 value */
  tmpreg1 = ADCx->SQR1;
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800067e:	60fb      	str	r3, [r7, #12]
  
  /* Clear L bits */
  tmpreg1 &= SQR1_L_RESET;
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8000686:	60fb      	str	r3, [r7, #12]
  
  /* Configure ADCx: regular channel sequence length */
  /* Set L bits according to ADC_NbrOfConversion value */
  tmpreg2 |= (uint8_t)(ADC_InitStruct->ADC_NbrOfConversion - (uint8_t)1);
 8000688:	683b      	ldr	r3, [r7, #0]
 800068a:	7d1b      	ldrb	r3, [r3, #20]
 800068c:	3b01      	subs	r3, #1
 800068e:	b2da      	uxtb	r2, r3
 8000690:	7afb      	ldrb	r3, [r7, #11]
 8000692:	4313      	orrs	r3, r2
 8000694:	72fb      	strb	r3, [r7, #11]
  tmpreg1 |= ((uint32_t)tmpreg2 << 20);
 8000696:	7afb      	ldrb	r3, [r7, #11]
 8000698:	051b      	lsls	r3, r3, #20
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	4313      	orrs	r3, r2
 800069e:	60fb      	str	r3, [r7, #12]
  
  /* Write to ADCx SQR1 */
  ADCx->SQR1 = tmpreg1;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	68fa      	ldr	r2, [r7, #12]
 80006a4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80006a6:	bf00      	nop
 80006a8:	3714      	adds	r7, #20
 80006aa:	46bd      	mov	sp, r7
 80006ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b0:	4770      	bx	lr
 80006b2:	bf00      	nop
 80006b4:	c0fff7fd 	.word	0xc0fff7fd

080006b8 <ADC_StructInit>:
  * @param  ADC_InitStruct: pointer to an ADC_InitTypeDef structure which will 
  *         be initialized.
  * @retval None
  */
void ADC_StructInit(ADC_InitTypeDef* ADC_InitStruct)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* Initialize the ADC_Mode member */
  ADC_InitStruct->ADC_Resolution = ADC_Resolution_12b;
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]

  /* initialize the ADC_ScanConvMode member */
  ADC_InitStruct->ADC_ScanConvMode = DISABLE;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	2200      	movs	r2, #0
 80006ca:	711a      	strb	r2, [r3, #4]

  /* Initialize the ADC_ContinuousConvMode member */
  ADC_InitStruct->ADC_ContinuousConvMode = DISABLE;
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	2200      	movs	r2, #0
 80006d0:	715a      	strb	r2, [r3, #5]

  /* Initialize the ADC_ExternalTrigConvEdge member */
  ADC_InitStruct->ADC_ExternalTrigConvEdge = ADC_ExternalTrigConvEdge_None;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	2200      	movs	r2, #0
 80006d6:	609a      	str	r2, [r3, #8]

  /* Initialize the ADC_ExternalTrigConv member */
  ADC_InitStruct->ADC_ExternalTrigConv = ADC_ExternalTrigConv_T1_CC1;
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	2200      	movs	r2, #0
 80006dc:	60da      	str	r2, [r3, #12]

  /* Initialize the ADC_DataAlign member */
  ADC_InitStruct->ADC_DataAlign = ADC_DataAlign_Right;
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	2200      	movs	r2, #0
 80006e2:	611a      	str	r2, [r3, #16]

  /* Initialize the ADC_NbrOfConversion member */
  ADC_InitStruct->ADC_NbrOfConversion = 1;
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	2201      	movs	r2, #1
 80006e8:	751a      	strb	r2, [r3, #20]
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f4:	4770      	bx	lr

080006f6 <ADC_Cmd>:
  * @param  NewState: new state of the ADCx peripheral. 
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void ADC_Cmd(ADC_TypeDef* ADCx, FunctionalState NewState)
{
 80006f6:	b480      	push	{r7}
 80006f8:	b083      	sub	sp, #12
 80006fa:	af00      	add	r7, sp, #0
 80006fc:	6078      	str	r0, [r7, #4]
 80006fe:	460b      	mov	r3, r1
 8000700:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000702:	78fb      	ldrb	r3, [r7, #3]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d006      	beq.n	8000716 <ADC_Cmd+0x20>
  {
    /* Set the ADON bit to wake up the ADC from power down mode */
    ADCx->CR2 |= (uint32_t)ADC_CR2_ADON;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	689b      	ldr	r3, [r3, #8]
 800070c:	f043 0201 	orr.w	r2, r3, #1
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	609a      	str	r2, [r3, #8]
  else
  {
    /* Disable the selected ADC peripheral */
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
  }
}
 8000714:	e005      	b.n	8000722 <ADC_Cmd+0x2c>
    ADCx->CR2 &= (uint32_t)(~ADC_CR2_ADON);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	689b      	ldr	r3, [r3, #8]
 800071a:	f023 0201 	bic.w	r2, r3, #1
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	609a      	str	r2, [r3, #8]
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr

0800072e <ADC_RegularChannelConfig>:
  *            @arg ADC_SampleTime_144Cycles: Sample time equal to 144 cycles	
  *            @arg ADC_SampleTime_480Cycles: Sample time equal to 480 cycles	
  * @retval None
  */
void ADC_RegularChannelConfig(ADC_TypeDef* ADCx, uint8_t ADC_Channel, uint8_t Rank, uint8_t ADC_SampleTime)
{
 800072e:	b480      	push	{r7}
 8000730:	b085      	sub	sp, #20
 8000732:	af00      	add	r7, sp, #0
 8000734:	6078      	str	r0, [r7, #4]
 8000736:	4608      	mov	r0, r1
 8000738:	4611      	mov	r1, r2
 800073a:	461a      	mov	r2, r3
 800073c:	4603      	mov	r3, r0
 800073e:	70fb      	strb	r3, [r7, #3]
 8000740:	460b      	mov	r3, r1
 8000742:	70bb      	strb	r3, [r7, #2]
 8000744:	4613      	mov	r3, r2
 8000746:	707b      	strb	r3, [r7, #1]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	2300      	movs	r3, #0
 800074e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(ADC_Channel));
  assert_param(IS_ADC_REGULAR_RANK(Rank));
  assert_param(IS_ADC_SAMPLE_TIME(ADC_SampleTime));
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (ADC_Channel > ADC_Channel_9)
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	2b09      	cmp	r3, #9
 8000754:	d923      	bls.n	800079e <ADC_RegularChannelConfig+0x70>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR1;
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	68db      	ldr	r3, [r3, #12]
 800075a:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR1_SMP_SET << (3 * (ADC_Channel - 10));
 800075c:	78fb      	ldrb	r3, [r7, #3]
 800075e:	f1a3 020a 	sub.w	r2, r3, #10
 8000762:	4613      	mov	r3, r2
 8000764:	005b      	lsls	r3, r3, #1
 8000766:	4413      	add	r3, r2
 8000768:	2207      	movs	r2, #7
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 8000770:	68bb      	ldr	r3, [r7, #8]
 8000772:	43db      	mvns	r3, r3
 8000774:	68fa      	ldr	r2, [r7, #12]
 8000776:	4013      	ands	r3, r2
 8000778:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * (ADC_Channel - 10));
 800077a:	7879      	ldrb	r1, [r7, #1]
 800077c:	78fb      	ldrb	r3, [r7, #3]
 800077e:	f1a3 020a 	sub.w	r2, r3, #10
 8000782:	4613      	mov	r3, r2
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	4413      	add	r3, r2
 8000788:	fa01 f303 	lsl.w	r3, r1, r3
 800078c:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 800078e:	68fa      	ldr	r2, [r7, #12]
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	4313      	orrs	r3, r2
 8000794:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR1 = tmpreg1;
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	68fa      	ldr	r2, [r7, #12]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	e01e      	b.n	80007dc <ADC_RegularChannelConfig+0xae>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SMPR2;
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	691b      	ldr	r3, [r3, #16]
 80007a2:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SMPR2_SMP_SET << (3 * ADC_Channel);
 80007a4:	78fa      	ldrb	r2, [r7, #3]
 80007a6:	4613      	mov	r3, r2
 80007a8:	005b      	lsls	r3, r3, #1
 80007aa:	4413      	add	r3, r2
 80007ac:	2207      	movs	r2, #7
 80007ae:	fa02 f303 	lsl.w	r3, r2, r3
 80007b2:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old sample time */
    tmpreg1 &= ~tmpreg2;
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	43db      	mvns	r3, r3
 80007b8:	68fa      	ldr	r2, [r7, #12]
 80007ba:	4013      	ands	r3, r2
 80007bc:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_SampleTime << (3 * ADC_Channel);
 80007be:	7879      	ldrb	r1, [r7, #1]
 80007c0:	78fa      	ldrb	r2, [r7, #3]
 80007c2:	4613      	mov	r3, r2
 80007c4:	005b      	lsls	r3, r3, #1
 80007c6:	4413      	add	r3, r2
 80007c8:	fa01 f303 	lsl.w	r3, r1, r3
 80007cc:	60bb      	str	r3, [r7, #8]
    
    /* Set the new sample time */
    tmpreg1 |= tmpreg2;
 80007ce:	68fa      	ldr	r2, [r7, #12]
 80007d0:	68bb      	ldr	r3, [r7, #8]
 80007d2:	4313      	orrs	r3, r2
 80007d4:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SMPR2 = tmpreg1;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	68fa      	ldr	r2, [r7, #12]
 80007da:	611a      	str	r2, [r3, #16]
  }
  /* For Rank 1 to 6 */
  if (Rank < 7)
 80007dc:	78bb      	ldrb	r3, [r7, #2]
 80007de:	2b06      	cmp	r3, #6
 80007e0:	d821      	bhi.n	8000826 <ADC_RegularChannelConfig+0xf8>
  {
    /* Get the old register value */
    tmpreg1 = ADCx->SQR3;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007e6:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to clear */
    tmpreg2 = SQR3_SQ_SET << (5 * (Rank - 1));
 80007e8:	78bb      	ldrb	r3, [r7, #2]
 80007ea:	1e5a      	subs	r2, r3, #1
 80007ec:	4613      	mov	r3, r2
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	4413      	add	r3, r2
 80007f2:	221f      	movs	r2, #31
 80007f4:	fa02 f303 	lsl.w	r3, r2, r3
 80007f8:	60bb      	str	r3, [r7, #8]
    
    /* Clear the old SQx bits for the selected rank */
    tmpreg1 &= ~tmpreg2;
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	43db      	mvns	r3, r3
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
    
    /* Calculate the mask to set */
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 1));
 8000804:	78f9      	ldrb	r1, [r7, #3]
 8000806:	78bb      	ldrb	r3, [r7, #2]
 8000808:	1e5a      	subs	r2, r3, #1
 800080a:	4613      	mov	r3, r2
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	4413      	add	r3, r2
 8000810:	fa01 f303 	lsl.w	r3, r1, r3
 8000814:	60bb      	str	r3, [r7, #8]
    
    /* Set the SQx bits for the selected rank */
    tmpreg1 |= tmpreg2;
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	4313      	orrs	r3, r2
 800081c:	60fb      	str	r3, [r7, #12]
    
    /* Store the new register value */
    ADCx->SQR3 = tmpreg1;
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	68fa      	ldr	r2, [r7, #12]
 8000822:	635a      	str	r2, [r3, #52]	; 0x34
    tmpreg1 |= tmpreg2;
    
    /* Store the new register value */
    ADCx->SQR1 = tmpreg1;
  }
}
 8000824:	e047      	b.n	80008b6 <ADC_RegularChannelConfig+0x188>
  else if (Rank < 13)
 8000826:	78bb      	ldrb	r3, [r7, #2]
 8000828:	2b0c      	cmp	r3, #12
 800082a:	d821      	bhi.n	8000870 <ADC_RegularChannelConfig+0x142>
    tmpreg1 = ADCx->SQR2;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000830:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR2_SQ_SET << (5 * (Rank - 7));
 8000832:	78bb      	ldrb	r3, [r7, #2]
 8000834:	1fda      	subs	r2, r3, #7
 8000836:	4613      	mov	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	4413      	add	r3, r2
 800083c:	221f      	movs	r2, #31
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	43db      	mvns	r3, r3
 8000848:	68fa      	ldr	r2, [r7, #12]
 800084a:	4013      	ands	r3, r2
 800084c:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 7));
 800084e:	78f9      	ldrb	r1, [r7, #3]
 8000850:	78bb      	ldrb	r3, [r7, #2]
 8000852:	1fda      	subs	r2, r3, #7
 8000854:	4613      	mov	r3, r2
 8000856:	009b      	lsls	r3, r3, #2
 8000858:	4413      	add	r3, r2
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 8000860:	68fa      	ldr	r2, [r7, #12]
 8000862:	68bb      	ldr	r3, [r7, #8]
 8000864:	4313      	orrs	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
    ADCx->SQR2 = tmpreg1;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800086e:	e022      	b.n	80008b6 <ADC_RegularChannelConfig+0x188>
    tmpreg1 = ADCx->SQR1;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000874:	60fb      	str	r3, [r7, #12]
    tmpreg2 = SQR1_SQ_SET << (5 * (Rank - 13));
 8000876:	78bb      	ldrb	r3, [r7, #2]
 8000878:	f1a3 020d 	sub.w	r2, r3, #13
 800087c:	4613      	mov	r3, r2
 800087e:	009b      	lsls	r3, r3, #2
 8000880:	4413      	add	r3, r2
 8000882:	221f      	movs	r2, #31
 8000884:	fa02 f303 	lsl.w	r3, r2, r3
 8000888:	60bb      	str	r3, [r7, #8]
    tmpreg1 &= ~tmpreg2;
 800088a:	68bb      	ldr	r3, [r7, #8]
 800088c:	43db      	mvns	r3, r3
 800088e:	68fa      	ldr	r2, [r7, #12]
 8000890:	4013      	ands	r3, r2
 8000892:	60fb      	str	r3, [r7, #12]
    tmpreg2 = (uint32_t)ADC_Channel << (5 * (Rank - 13));
 8000894:	78f9      	ldrb	r1, [r7, #3]
 8000896:	78bb      	ldrb	r3, [r7, #2]
 8000898:	f1a3 020d 	sub.w	r2, r3, #13
 800089c:	4613      	mov	r3, r2
 800089e:	009b      	lsls	r3, r3, #2
 80008a0:	4413      	add	r3, r2
 80008a2:	fa01 f303 	lsl.w	r3, r1, r3
 80008a6:	60bb      	str	r3, [r7, #8]
    tmpreg1 |= tmpreg2;
 80008a8:	68fa      	ldr	r2, [r7, #12]
 80008aa:	68bb      	ldr	r3, [r7, #8]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]
    ADCx->SQR1 = tmpreg1;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	68fa      	ldr	r2, [r7, #12]
 80008b4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80008b6:	bf00      	nop
 80008b8:	3714      	adds	r7, #20
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <ADC_GetConversionValue>:
  * @brief  Returns the last ADCx conversion result data for regular channel.
  * @param  ADCx: where x can be 1, 2 or 3 to select the ADC peripheral.
  * @retval The Data conversion value.
  */
uint16_t ADC_GetConversionValue(ADC_TypeDef* ADCx)
{
 80008c2:	b480      	push	{r7}
 80008c4:	b083      	sub	sp, #12
 80008c6:	af00      	add	r7, sp, #0
 80008c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_PERIPH(ADCx));
  
  /* Return the selected ADC conversion value */
  return (uint16_t) ADCx->DR;
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ce:	b29b      	uxth	r3, r3
}
 80008d0:	4618      	mov	r0, r3
 80008d2:	370c      	adds	r7, #12
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <DAC_SetChannel1Data>:
  *            @arg DAC_Align_12b_R: 12bit right data alignment selected
  * @param  Data: Data to be loaded in the selected data holding register.
  * @retval None
  */
void DAC_SetChannel1Data(uint32_t DAC_Align, uint16_t Data)
{  
 80008dc:	b480      	push	{r7}
 80008de:	b085      	sub	sp, #20
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	807b      	strh	r3, [r7, #2]
  __IO uint32_t tmp = 0;
 80008e8:	2300      	movs	r3, #0
 80008ea:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_DAC_ALIGN(DAC_Align));
  assert_param(IS_DAC_DATA(Data));
  
  tmp = (uint32_t)DAC_BASE; 
 80008ec:	4b08      	ldr	r3, [pc, #32]	; (8000910 <DAC_SetChannel1Data+0x34>)
 80008ee:	60fb      	str	r3, [r7, #12]
  tmp += DHR12R1_OFFSET + DAC_Align;
 80008f0:	68fa      	ldr	r2, [r7, #12]
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	4413      	add	r3, r2
 80008f6:	3308      	adds	r3, #8
 80008f8:	60fb      	str	r3, [r7, #12]

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	461a      	mov	r2, r3
 80008fe:	887b      	ldrh	r3, [r7, #2]
 8000900:	6013      	str	r3, [r2, #0]
}
 8000902:	bf00      	nop
 8000904:	3714      	adds	r7, #20
 8000906:	46bd      	mov	sp, r7
 8000908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090c:	4770      	bx	lr
 800090e:	bf00      	nop
 8000910:	40007400 	.word	0x40007400

08000914 <DMA_Init>:
  * @param  DMA_InitStruct: pointer to a DMA_InitTypeDef structure that contains
  *         the configuration information for the specified DMA Stream.  
  * @retval None
  */
void DMA_Init(DMA_Stream_TypeDef* DMAy_Streamx, DMA_InitTypeDef* DMA_InitStruct)
{
 8000914:	b480      	push	{r7}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
 800091c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	60fb      	str	r3, [r7, #12]
  assert_param(IS_DMA_MEMORY_BURST(DMA_InitStruct->DMA_MemoryBurst));
  assert_param(IS_DMA_PERIPHERAL_BURST(DMA_InitStruct->DMA_PeripheralBurst));

  /*------------------------- DMAy Streamx CR Configuration ------------------*/
  /* Get the DMAy_Streamx CR value */
  tmpreg = DMAy_Streamx->CR;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	60fb      	str	r3, [r7, #12]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmpreg &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8000928:	68fa      	ldr	r2, [r7, #12]
 800092a:	4b25      	ldr	r3, [pc, #148]	; (80009c0 <DMA_Init+0xac>)
 800092c:	4013      	ands	r3, r2
 800092e:	60fb      	str	r3, [r7, #12]
  /* Set MSIZE bits according to DMA_MemoryDataSize value */
  /* Set CIRC bit according to DMA_Mode value */
  /* Set PL bits according to DMA_Priority value */
  /* Set MBURST bits according to DMA_MemoryBurst value */
  /* Set PBURST bits according to DMA_PeripheralBurst value */
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 8000930:	683b      	ldr	r3, [r7, #0]
 8000932:	681a      	ldr	r2, [r3, #0]
 8000934:	683b      	ldr	r3, [r7, #0]
 8000936:	68db      	ldr	r3, [r3, #12]
 8000938:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	695b      	ldr	r3, [r3, #20]
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800093e:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	69db      	ldr	r3, [r3, #28]
            DMA_InitStruct->DMA_PeripheralInc | DMA_InitStruct->DMA_MemoryInc |
 800094a:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	6a1b      	ldr	r3, [r3, #32]
 8000950:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000952:	683b      	ldr	r3, [r7, #0]
 8000954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
            DMA_InitStruct->DMA_PeripheralDataSize | DMA_InitStruct->DMA_MemoryDataSize |
 8000956:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800095c:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            DMA_InitStruct->DMA_Mode | DMA_InitStruct->DMA_Priority |
 8000962:	431a      	orrs	r2, r3
            DMA_InitStruct->DMA_MemoryBurst | DMA_InitStruct->DMA_PeripheralBurst;
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000968:	4313      	orrs	r3, r2
  tmpreg |= DMA_InitStruct->DMA_Channel | DMA_InitStruct->DMA_DIR |
 800096a:	68fa      	ldr	r2, [r7, #12]
 800096c:	4313      	orrs	r3, r2
 800096e:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR register */
  DMAy_Streamx->CR = tmpreg;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	68fa      	ldr	r2, [r7, #12]
 8000974:	601a      	str	r2, [r3, #0]

  /*------------------------- DMAy Streamx FCR Configuration -----------------*/
  /* Get the DMAy_Streamx FCR value */
  tmpreg = DMAy_Streamx->FCR;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	695b      	ldr	r3, [r3, #20]
 800097a:	60fb      	str	r3, [r7, #12]

  /* Clear DMDIS and FTH bits */
  tmpreg &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	f023 0307 	bic.w	r3, r3, #7
 8000982:	60fb      	str	r3, [r7, #12]

  /* Configure DMAy Streamx FIFO: 
    Set DMDIS bits according to DMA_FIFOMode value 
    Set FTH bits according to DMA_FIFOThreshold value */
  tmpreg |= DMA_InitStruct->DMA_FIFOMode | DMA_InitStruct->DMA_FIFOThreshold;
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098c:	4313      	orrs	r3, r2
 800098e:	68fa      	ldr	r2, [r7, #12]
 8000990:	4313      	orrs	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]

  /* Write to DMAy Streamx CR */
  DMAy_Streamx->FCR = tmpreg;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	615a      	str	r2, [r3, #20]

  /*------------------------- DMAy Streamx NDTR Configuration ----------------*/
  /* Write to DMAy Streamx NDTR register */
  DMAy_Streamx->NDTR = DMA_InitStruct->DMA_BufferSize;
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	691a      	ldr	r2, [r3, #16]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	605a      	str	r2, [r3, #4]

  /*------------------------- DMAy Streamx PAR Configuration -----------------*/
  /* Write to DMAy Streamx PAR */
  DMAy_Streamx->PAR = DMA_InitStruct->DMA_PeripheralBaseAddr;
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	685a      	ldr	r2, [r3, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	609a      	str	r2, [r3, #8]

  /*------------------------- DMAy Streamx M0AR Configuration ----------------*/
  /* Write to DMAy Streamx M0AR */
  DMAy_Streamx->M0AR = DMA_InitStruct->DMA_Memory0BaseAddr;
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	689a      	ldr	r2, [r3, #8]
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	60da      	str	r2, [r3, #12]
}
 80009b2:	bf00      	nop
 80009b4:	3714      	adds	r7, #20
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	f01c803f 	.word	0xf01c803f

080009c4 <DMA_Cmd>:
  *        this single data is finished.            
  *    
  * @retval None
  */
void DMA_Cmd(DMA_Stream_TypeDef* DMAy_Streamx, FunctionalState NewState)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b083      	sub	sp, #12
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	6078      	str	r0, [r7, #4]
 80009cc:	460b      	mov	r3, r1
 80009ce:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009d0:	78fb      	ldrb	r3, [r7, #3]
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d006      	beq.n	80009e4 <DMA_Cmd+0x20>
  {
    /* Enable the selected DMAy Streamx by setting EN bit */
    DMAy_Streamx->CR |= (uint32_t)DMA_SxCR_EN;
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	f043 0201 	orr.w	r2, r3, #1
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Disable the selected DMAy Streamx by clearing EN bit */
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
  }
}
 80009e2:	e005      	b.n	80009f0 <DMA_Cmd+0x2c>
    DMAy_Streamx->CR &= ~(uint32_t)DMA_SxCR_EN;
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f023 0201 	bic.w	r2, r3, #1
 80009ec:	687b      	ldr	r3, [r7, #4]
 80009ee:	601a      	str	r2, [r3, #0]
}
 80009f0:	bf00      	nop
 80009f2:	370c      	adds	r7, #12
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <DMA_GetCmdStatus>:
  *          of this single data is finished.  
  *      
  * @retval Current state of the DMAy Streamx (ENABLE or DISABLE).
  */
FunctionalState DMA_GetCmdStatus(DMA_Stream_TypeDef* DMAy_Streamx)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b085      	sub	sp, #20
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  FunctionalState state = DISABLE;
 8000a04:	2300      	movs	r3, #0
 8000a06:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));

  if ((DMAy_Streamx->CR & (uint32_t)DMA_SxCR_EN) != 0)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	f003 0301 	and.w	r3, r3, #1
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d002      	beq.n	8000a1a <DMA_GetCmdStatus+0x1e>
  {
    /* The selected DMAy Streamx EN bit is set (DMA is still transferring) */
    state = ENABLE;
 8000a14:	2301      	movs	r3, #1
 8000a16:	73fb      	strb	r3, [r7, #15]
 8000a18:	e001      	b.n	8000a1e <DMA_GetCmdStatus+0x22>
  }
  else
  {
    /* The selected DMAy Streamx EN bit is cleared (DMA is disabled and 
        all transfers are complete) */
    state = DISABLE;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	73fb      	strb	r3, [r7, #15]
  }
  return state;
 8000a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr

08000a2c <DMA_GetFlagStatus>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.
  * @retval The new state of DMA_FLAG (SET or RESET).
  */
FlagStatus DMA_GetFlagStatus(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b087      	sub	sp, #28
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	6039      	str	r1, [r7, #0]
  FlagStatus bitstatus = RESET;
 8000a36:	2300      	movs	r3, #0
 8000a38:	75fb      	strb	r3, [r7, #23]
  DMA_TypeDef* DMAy;
  uint32_t tmpreg = 0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_GET_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a15      	ldr	r2, [pc, #84]	; (8000a98 <DMA_GetFlagStatus+0x6c>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d802      	bhi.n	8000a4c <DMA_GetFlagStatus+0x20>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000a46:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <DMA_GetFlagStatus+0x70>)
 8000a48:	613b      	str	r3, [r7, #16]
 8000a4a:	e001      	b.n	8000a50 <DMA_GetFlagStatus+0x24>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <DMA_GetFlagStatus+0x74>)
 8000a4e:	613b      	str	r3, [r7, #16]
  }

  /* Check if the flag is in HISR or LISR */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <DMA_GetFlagStatus+0x36>
  {
    /* Get DMAy HISR register value */
    tmpreg = DMAy->HISR;
 8000a5a:	693b      	ldr	r3, [r7, #16]
 8000a5c:	685b      	ldr	r3, [r3, #4]
 8000a5e:	60fb      	str	r3, [r7, #12]
 8000a60:	e002      	b.n	8000a68 <DMA_GetFlagStatus+0x3c>
  }
  else
  {
    /* Get DMAy LISR register value */
    tmpreg = DMAy->LISR;
 8000a62:	693b      	ldr	r3, [r7, #16]
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	60fb      	str	r3, [r7, #12]
  }   
 
  /* Mask the reserved bits */
  tmpreg &= (uint32_t)RESERVED_MASK;
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000a6e:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000a72:	60fb      	str	r3, [r7, #12]

  /* Check the status of the specified DMA flag */
  if ((tmpreg & DMA_FLAG) != (uint32_t)RESET)
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	683b      	ldr	r3, [r7, #0]
 8000a78:	4013      	ands	r3, r2
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	d002      	beq.n	8000a84 <DMA_GetFlagStatus+0x58>
  {
    /* DMA_FLAG is set */
    bitstatus = SET;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	75fb      	strb	r3, [r7, #23]
 8000a82:	e001      	b.n	8000a88 <DMA_GetFlagStatus+0x5c>
  }
  else
  {
    /* DMA_FLAG is reset */
    bitstatus = RESET;
 8000a84:	2300      	movs	r3, #0
 8000a86:	75fb      	strb	r3, [r7, #23]
  }

  /* Return the DMA_FLAG status */
  return  bitstatus;
 8000a88:	7dfb      	ldrb	r3, [r7, #23]
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	371c      	adds	r7, #28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	4002640f 	.word	0x4002640f
 8000a9c:	40026000 	.word	0x40026000
 8000aa0:	40026400 	.word	0x40026400

08000aa4 <DMA_ClearFlag>:
  *            @arg DMA_FLAG_FEIFx:  Streamx FIFO error flag
  *         Where x can be 0 to 7 to select the DMA Stream.   
  * @retval None
  */
void DMA_ClearFlag(DMA_Stream_TypeDef* DMAy_Streamx, uint32_t DMA_FLAG)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b085      	sub	sp, #20
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA_ALL_PERIPH(DMAy_Streamx));
  assert_param(IS_DMA_CLEAR_FLAG(DMA_FLAG));

  /* Determine the DMA to which belongs the stream */
  if (DMAy_Streamx < DMA2_Stream0)
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a10      	ldr	r2, [pc, #64]	; (8000af4 <DMA_ClearFlag+0x50>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d802      	bhi.n	8000abc <DMA_ClearFlag+0x18>
  {
    /* DMAy_Streamx belongs to DMA1 */
    DMAy = DMA1; 
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <DMA_ClearFlag+0x54>)
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	e001      	b.n	8000ac0 <DMA_ClearFlag+0x1c>
  } 
  else 
  {
    /* DMAy_Streamx belongs to DMA2 */
    DMAy = DMA2; 
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <DMA_ClearFlag+0x58>)
 8000abe:	60fb      	str	r3, [r7, #12]
  }

  /* Check if LIFCR or HIFCR register is targeted */
  if ((DMA_FLAG & HIGH_ISR_MASK) != (uint32_t)RESET)
 8000ac0:	683b      	ldr	r3, [r7, #0]
 8000ac2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d007      	beq.n	8000ada <DMA_ClearFlag+0x36>
  {
    /* Set DMAy HIFCR register clear flag bits */
    DMAy->HIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000ad0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000ad4:	68fa      	ldr	r2, [r7, #12]
 8000ad6:	60d3      	str	r3, [r2, #12]
  else 
  {
    /* Set DMAy LIFCR register clear flag bits */
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
  }    
}
 8000ad8:	e006      	b.n	8000ae8 <DMA_ClearFlag+0x44>
    DMAy->LIFCR = (uint32_t)(DMA_FLAG & RESERVED_MASK);
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	f023 23f0 	bic.w	r3, r3, #4026593280	; 0xf000f000
 8000ae0:	f023 1382 	bic.w	r3, r3, #8519810	; 0x820082
 8000ae4:	68fa      	ldr	r2, [r7, #12]
 8000ae6:	6093      	str	r3, [r2, #8]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	4002640f 	.word	0x4002640f
 8000af8:	40026000 	.word	0x40026000
 8000afc:	40026400 	.word	0x40026400

08000b00 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	460b      	mov	r3, r1
 8000b0a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000b0c:	78fb      	ldrb	r3, [r7, #3]
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d006      	beq.n	8000b20 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000b12:	490a      	ldr	r1, [pc, #40]	; (8000b3c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b14:	4b09      	ldr	r3, [pc, #36]	; (8000b3c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000b1e:	e006      	b.n	8000b2e <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000b20:	4906      	ldr	r1, [pc, #24]	; (8000b3c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <RCC_AHB1PeriphClockCmd+0x3c>)
 8000b24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	43db      	mvns	r3, r3
 8000b2a:	4013      	ands	r3, r2
 8000b2c:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000b2e:	bf00      	nop
 8000b30:	370c      	adds	r7, #12
 8000b32:	46bd      	mov	sp, r7
 8000b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop
 8000b3c:	40023800 	.word	0x40023800

08000b40 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 8000b40:	b480      	push	{r7}
 8000b42:	b083      	sub	sp, #12
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
 8000b48:	460b      	mov	r3, r1
 8000b4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000b4c:	78fb      	ldrb	r3, [r7, #3]
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d006      	beq.n	8000b60 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000b52:	490a      	ldr	r1, [pc, #40]	; (8000b7c <RCC_APB2PeriphClockCmd+0x3c>)
 8000b54:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <RCC_APB2PeriphClockCmd+0x3c>)
 8000b56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	4313      	orrs	r3, r2
 8000b5c:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000b5e:	e006      	b.n	8000b6e <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000b60:	4906      	ldr	r1, [pc, #24]	; (8000b7c <RCC_APB2PeriphClockCmd+0x3c>)
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <RCC_APB2PeriphClockCmd+0x3c>)
 8000b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	43db      	mvns	r3, r3
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800

08000b80 <SPI_I2S_SendData>:
  *         in SPI mode or 2 or 3 in I2S mode or I2Sxext for I2S full duplex mode.     
  * @param  Data: Data to be transmitted.
  * @retval None
  */
void SPI_I2S_SendData(SPI_TypeDef* SPIx, uint16_t Data)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
 8000b88:	460b      	mov	r3, r1
 8000b8a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  
  /* Write in the DR register the data to be sent */
  SPIx->DR = Data;
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	887a      	ldrh	r2, [r7, #2]
 8000b90:	819a      	strh	r2, [r3, #12]
}
 8000b92:	bf00      	nop
 8000b94:	370c      	adds	r7, #12
 8000b96:	46bd      	mov	sp, r7
 8000b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9c:	4770      	bx	lr

08000b9e <SPI_I2S_GetFlagStatus>:
  *            @arg I2S_FLAG_UDR: Underrun Error flag.
  *            @arg I2S_FLAG_CHSIDE: Channel Side flag.  
  * @retval The new state of SPI_I2S_FLAG (SET or RESET).
  */
FlagStatus SPI_I2S_GetFlagStatus(SPI_TypeDef* SPIx, uint16_t SPI_I2S_FLAG)
{
 8000b9e:	b480      	push	{r7}
 8000ba0:	b085      	sub	sp, #20
 8000ba2:	af00      	add	r7, sp, #0
 8000ba4:	6078      	str	r0, [r7, #4]
 8000ba6:	460b      	mov	r3, r1
 8000ba8:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000baa:	2300      	movs	r3, #0
 8000bac:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  assert_param(IS_SPI_ALL_PERIPH_EXT(SPIx));
  assert_param(IS_SPI_I2S_GET_FLAG(SPI_I2S_FLAG));
  
  /* Check the status of the specified SPI flag */
  if ((SPIx->SR & SPI_I2S_FLAG) != (uint16_t)RESET)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	891b      	ldrh	r3, [r3, #8]
 8000bb2:	b29a      	uxth	r2, r3
 8000bb4:	887b      	ldrh	r3, [r7, #2]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	b29b      	uxth	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d002      	beq.n	8000bc4 <SPI_I2S_GetFlagStatus+0x26>
  {
    /* SPI_I2S_FLAG is set */
    bitstatus = SET;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	73fb      	strb	r3, [r7, #15]
 8000bc2:	e001      	b.n	8000bc8 <SPI_I2S_GetFlagStatus+0x2a>
  }
  else
  {
    /* SPI_I2S_FLAG is reset */
    bitstatus = RESET;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	73fb      	strb	r3, [r7, #15]
  }
  /* Return the SPI_I2S_FLAG status */
  return  bitstatus;
 8000bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
	...

08000bd8 <Audio_MAL_IRQHandler>:
  * @brief  This function handles main Media layer interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
static void Audio_MAL_IRQHandler(void)
{    
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  uint32_t Size = AudioRemSize;
#endif /* AUDIO_MAL_MODE_NORMAL */
  
#ifdef AUDIO_MAL_DMA_IT_TC_EN
  /* Transfer complete interrupt */
  if (DMA_GetFlagStatus(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC) != RESET)
 8000bdc:	4b38      	ldr	r3, [pc, #224]	; (8000cc0 <Audio_MAL_IRQHandler+0xe8>)
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	4b38      	ldr	r3, [pc, #224]	; (8000cc4 <Audio_MAL_IRQHandler+0xec>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4619      	mov	r1, r3
 8000be6:	4610      	mov	r0, r2
 8000be8:	f7ff ff20 	bl	8000a2c <DMA_GetFlagStatus>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d064      	beq.n	8000cbc <Audio_MAL_IRQHandler+0xe4>
  {         
 #ifdef AUDIO_MAL_MODE_NORMAL
    /* Check if the end of file has been reached */
    if (AudioRemSize > 0)
 8000bf2:	4b35      	ldr	r3, [pc, #212]	; (8000cc8 <Audio_MAL_IRQHandler+0xf0>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d04c      	beq.n	8000c94 <Audio_MAL_IRQHandler+0xbc>
    {      
      /* Wait the DMA Stream to be effectively disabled */
      while (DMA_GetCmdStatus(AUDIO_MAL_DMA_STREAM) != DISABLE)
 8000bfa:	bf00      	nop
 8000bfc:	4b30      	ldr	r3, [pc, #192]	; (8000cc0 <Audio_MAL_IRQHandler+0xe8>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff fefb 	bl	80009fc <DMA_GetCmdStatus>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d1f7      	bne.n	8000bfc <Audio_MAL_IRQHandler+0x24>
      {}
      
      /* Clear the Interrupt flag */
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC); 
 8000c0c:	4b2c      	ldr	r3, [pc, #176]	; (8000cc0 <Audio_MAL_IRQHandler+0xe8>)
 8000c0e:	681a      	ldr	r2, [r3, #0]
 8000c10:	4b2c      	ldr	r3, [pc, #176]	; (8000cc4 <Audio_MAL_IRQHandler+0xec>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4619      	mov	r1, r3
 8000c16:	4610      	mov	r0, r2
 8000c18:	f7ff ff44 	bl	8000aa4 <DMA_ClearFlag>
           
      /* Re-Configure the buffer address and size */
      DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t) CurrentPos;
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <Audio_MAL_IRQHandler+0xf4>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	461a      	mov	r2, r3
 8000c22:	4b2b      	ldr	r3, [pc, #172]	; (8000cd0 <Audio_MAL_IRQHandler+0xf8>)
 8000c24:	609a      	str	r2, [r3, #8]
      DMA_InitStructure.DMA_BufferSize = (uint32_t) (DMA_MAX(AudioRemSize));
 8000c26:	4b28      	ldr	r3, [pc, #160]	; (8000cc8 <Audio_MAL_IRQHandler+0xf0>)
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	bf28      	it	cs
 8000c32:	4613      	movcs	r3, r2
 8000c34:	4a26      	ldr	r2, [pc, #152]	; (8000cd0 <Audio_MAL_IRQHandler+0xf8>)
 8000c36:	6113      	str	r3, [r2, #16]
            
      /* Configure the DMA Stream with the new parameters */
      DMA_Init(AUDIO_MAL_DMA_STREAM, &DMA_InitStructure);
 8000c38:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <Audio_MAL_IRQHandler+0xe8>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4924      	ldr	r1, [pc, #144]	; (8000cd0 <Audio_MAL_IRQHandler+0xf8>)
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff fe68 	bl	8000914 <DMA_Init>
      
      /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE);    
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <Audio_MAL_IRQHandler+0xe8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2101      	movs	r1, #1
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f7ff feba 	bl	80009c4 <DMA_Cmd>
      
      /* Update the current pointer position */
      CurrentPos += DMA_MAX(AudioRemSize);        
 8000c50:	4b1e      	ldr	r3, [pc, #120]	; (8000ccc <Audio_MAL_IRQHandler+0xf4>)
 8000c52:	681a      	ldr	r2, [r3, #0]
 8000c54:	4b1c      	ldr	r3, [pc, #112]	; (8000cc8 <Audio_MAL_IRQHandler+0xf0>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c5c:	d203      	bcs.n	8000c66 <Audio_MAL_IRQHandler+0x8e>
 8000c5e:	4b1a      	ldr	r3, [pc, #104]	; (8000cc8 <Audio_MAL_IRQHandler+0xf0>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	e000      	b.n	8000c68 <Audio_MAL_IRQHandler+0x90>
 8000c66:	4b1b      	ldr	r3, [pc, #108]	; (8000cd4 <Audio_MAL_IRQHandler+0xfc>)
 8000c68:	4413      	add	r3, r2
 8000c6a:	4a18      	ldr	r2, [pc, #96]	; (8000ccc <Audio_MAL_IRQHandler+0xf4>)
 8000c6c:	6013      	str	r3, [r2, #0]
      
      /* Update the remaining number of data to be played */
      AudioRemSize -= DMA_MAX(AudioRemSize);   
 8000c6e:	4b16      	ldr	r3, [pc, #88]	; (8000cc8 <Audio_MAL_IRQHandler+0xf0>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	4b15      	ldr	r3, [pc, #84]	; (8000cc8 <Audio_MAL_IRQHandler+0xf0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8000c7a:	428b      	cmp	r3, r1
 8000c7c:	bf28      	it	cs
 8000c7e:	460b      	movcs	r3, r1
 8000c80:	1ad3      	subs	r3, r2, r3
 8000c82:	4a11      	ldr	r2, [pc, #68]	; (8000cc8 <Audio_MAL_IRQHandler+0xf0>)
 8000c84:	6013      	str	r3, [r2, #0]
        /* Enable the I2S DMA Stream*/
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, ENABLE); 
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <Audio_MAL_IRQHandler+0xe8>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	f7ff fe99 	bl	80009c4 <DMA_Cmd>
    /* Clear the Interrupt flag */
    DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TE | AUDIO_MAL_DMA_FLAG_FE | \
                                        AUDIO_MAL_DMA_FLAG_DME);
  }  
#endif /* AUDIO_MAL_DMA_IT_TE_EN */
}
 8000c92:	e013      	b.n	8000cbc <Audio_MAL_IRQHandler+0xe4>
      DMA_Cmd(AUDIO_MAL_DMA_STREAM, DISABLE);   
 8000c94:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <Audio_MAL_IRQHandler+0xe8>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2100      	movs	r1, #0
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	f7ff fe92 	bl	80009c4 <DMA_Cmd>
      DMA_ClearFlag(AUDIO_MAL_DMA_STREAM, AUDIO_MAL_DMA_FLAG_TC);       
 8000ca0:	4b07      	ldr	r3, [pc, #28]	; (8000cc0 <Audio_MAL_IRQHandler+0xe8>)
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	4b07      	ldr	r3, [pc, #28]	; (8000cc4 <Audio_MAL_IRQHandler+0xec>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	4610      	mov	r0, r2
 8000cac:	f7ff fefa 	bl	8000aa4 <DMA_ClearFlag>
      EVAL_AUDIO_TransferComplete_CallBack((uint32_t)CurrentPos, 0);       
 8000cb0:	4b06      	ldr	r3, [pc, #24]	; (8000ccc <Audio_MAL_IRQHandler+0xf4>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f000 f83c 	bl	8000d34 <EVAL_AUDIO_TransferComplete_CallBack>
}
 8000cbc:	bf00      	nop
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000008 	.word	0x20000008
 8000cc4:	2000000c 	.word	0x2000000c
 8000cc8:	20000000 	.word	0x20000000
 8000ccc:	200000cc 	.word	0x200000cc
 8000cd0:	2000010c 	.word	0x2000010c
 8000cd4:	0001fffe 	.word	0x0001fffe

08000cd8 <DMA1_Stream7_IRQHandler>:
  * @brief  This function handles main I2S interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_I2S_IRQHandler(void)
{ 
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000cdc:	f7ff ff7c 	bl	8000bd8 <Audio_MAL_IRQHandler>
}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}

08000ce4 <DMA1_Stream0_IRQHandler>:
  * @brief  This function handles main DAC interrupt. 
  * @param  None
  * @retval 0 if correct communication, else wrong communication
  */
void Audio_MAL_DAC_IRQHandler(void)
{ 
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  Audio_MAL_IRQHandler();
 8000ce8:	f7ff ff76 	bl	8000bd8 <Audio_MAL_IRQHandler>
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <SPI3_IRQHandler>:
  * @brief  I2S interrupt management
  * @param  None
  * @retval None
  */
void Audio_I2S_IRQHandler(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* Check on the I2S TXE flag */  
  if (SPI_I2S_GetFlagStatus(SPI3, SPI_I2S_FLAG_TXE) != RESET)
 8000cf4:	2102      	movs	r1, #2
 8000cf6:	480d      	ldr	r0, [pc, #52]	; (8000d2c <SPI3_IRQHandler+0x3c>)
 8000cf8:	f7ff ff51 	bl	8000b9e <SPI_I2S_GetFlagStatus>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d011      	beq.n	8000d26 <SPI3_IRQHandler+0x36>
  { 
    if (CurrAudioInterface == AUDIO_INTERFACE_DAC)
 8000d02:	4b0b      	ldr	r3, [pc, #44]	; (8000d30 <SPI3_IRQHandler+0x40>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	2b02      	cmp	r3, #2
 8000d08:	d106      	bne.n	8000d18 <SPI3_IRQHandler+0x28>
    {
      /* Wirte data to the DAC interface */
      DAC_SetChannel1Data(DAC_Align_12b_L, EVAL_AUDIO_GetSampleCallBack()); 
 8000d0a:	f000 f81e 	bl	8000d4a <EVAL_AUDIO_GetSampleCallBack>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	4619      	mov	r1, r3
 8000d12:	2004      	movs	r0, #4
 8000d14:	f7ff fde2 	bl	80008dc <DAC_SetChannel1Data>
    }
    
    /* Send dummy data on I2S to avoid the underrun condition */
    SPI_I2S_SendData(CODEC_I2S, EVAL_AUDIO_GetSampleCallBack()); 
 8000d18:	f000 f817 	bl	8000d4a <EVAL_AUDIO_GetSampleCallBack>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4802      	ldr	r0, [pc, #8]	; (8000d2c <SPI3_IRQHandler+0x3c>)
 8000d22:	f7ff ff2d 	bl	8000b80 <SPI_I2S_SendData>
  }
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40003c00 	.word	0x40003c00
 8000d30:	20000004 	.word	0x20000004

08000d34 <EVAL_AUDIO_TransferComplete_CallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) void EVAL_AUDIO_TransferComplete_CallBack(uint32_t pBuffer, uint32_t Size)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
 8000d3c:	6039      	str	r1, [r7, #0]
  /* TODO, implement your code here */
  return;
 8000d3e:	bf00      	nop
}
 8000d40:	370c      	adds	r7, #12
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr

08000d4a <EVAL_AUDIO_GetSampleCallBack>:
/*
 * Callback used by stm32f4_discovery_audio_codec.c.
 * Refer to stm32f4_discovery_audio_codec.h for more info.
 */
__attribute__((weak)) uint16_t EVAL_AUDIO_GetSampleCallBack(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* TODO, implement your code here */
  return 0;
 8000d4e:	2300      	movs	r3, #0
}
 8000d50:	4618      	mov	r0, r3
 8000d52:	46bd      	mov	sp, r7
 8000d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d58:	4770      	bx	lr
	...

08000d5c <NVIC_SetPriorityGrouping>:
  priority bits (__NVIC_PRIO_BITS) the smallest possible priority group is set.

    \param [in]      PriorityGroup  Priority grouping field
 */
static __INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07);               /* only values 0..7 are used          */
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f003 0307 	and.w	r3, r3, #7
 8000d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <NVIC_SetPriorityGrouping+0x44>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk);             /* clear bits to change               */
 8000d72:	68ba      	ldr	r2, [r7, #8]
 8000d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d78:	4013      	ands	r3, r2
 8000d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                 |
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8));                                     /* Insert write key and priorty group */
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FA << SCB_AIRCR_VECTKEY_Pos) |
 8000d80:	68bb      	ldr	r3, [r7, #8]
 8000d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                 |
 8000d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d8e:	4a04      	ldr	r2, [pc, #16]	; (8000da0 <NVIC_SetPriorityGrouping+0x44>)
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	60d3      	str	r3, [r2, #12]
}
 8000d94:	bf00      	nop
 8000d96:	3714      	adds	r7, #20
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000ed00 	.word	0xe000ed00

08000da4 <main>:
unsigned char digits[10] = { 0x3f, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F };

/*-----------------------------------------------------------*/

int main(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0


	adc_initialize ();
 8000daa:	f000 f81f 	bl	8000dec <adc_initialize>
	//led_init();

	/* Configure the system ready to run the demo.  The clock configuration
	can be done here if it was not done before main() was called. */
	prvSetupHardware();
 8000dae:	f000 f849 	bl	8000e44 <prvSetupHardware>
	GPIO_Setup();
 8000db2:	f000 f87f 	bl	8000eb4 <GPIO_Setup>

	int count = 0;
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
		while(1){
			if(count > 4800000){
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <main+0x3c>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	dd09      	ble.n	8000dd6 <main+0x32>
				printf("ADC Value is: %u \n", (unsigned int)ADC_GetConversionValue(ADC1));
 8000dc2:	4808      	ldr	r0, [pc, #32]	; (8000de4 <main+0x40>)
 8000dc4:	f7ff fd7d 	bl	80008c2 <ADC_GetConversionValue>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	4619      	mov	r1, r3
 8000dcc:	4806      	ldr	r0, [pc, #24]	; (8000de8 <main+0x44>)
 8000dce:	f000 fc4b 	bl	8001668 <printf>
				count = 0;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
			}
			count++;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	607b      	str	r3, [r7, #4]
			if(count > 4800000){
 8000ddc:	e7ed      	b.n	8000dba <main+0x16>
 8000dde:	bf00      	nop
 8000de0:	00493e00 	.word	0x00493e00
 8000de4:	40012000 	.word	0x40012000
 8000de8:	08001744 	.word	0x08001744

08000dec <adc_initialize>:
	}
}

/*-----------------------------------------------------------*/

void adc_initialize( void ){
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0

	ADC_InitTypeDef ADCInit_Structure;
	ADC_StructInit(&ADCInit_Structure);
 8000df2:	463b      	mov	r3, r7
 8000df4:	4618      	mov	r0, r3
 8000df6:	f7ff fc5f 	bl	80006b8 <ADC_StructInit>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_ADC1, ENABLE); // Enables the ADC1 Clock
 8000dfa:	2101      	movs	r1, #1
 8000dfc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8000e00:	f7ff fe9e 	bl	8000b40 <RCC_APB2PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE); // Enables the clock for the ADC1 GPIOA
 8000e04:	2101      	movs	r1, #1
 8000e06:	2001      	movs	r0, #1
 8000e08:	f7ff fe7a 	bl	8000b00 <RCC_AHB1PeriphClockCmd>
	ADC_Init(ADC1, &ADCInit_Structure); // Enables and configures the prescaler, unsure if these are the correct values
 8000e0c:	463b      	mov	r3, r7
 8000e0e:	4619      	mov	r1, r3
 8000e10:	4808      	ldr	r0, [pc, #32]	; (8000e34 <adc_initialize+0x48>)
 8000e12:	f7ff fbfb 	bl	800060c <ADC_Init>
	ADC_RegularChannelConfig(ADC1, ADC_Channel_0, 1, ADC_SampleTime_3Cycles);
 8000e16:	2300      	movs	r3, #0
 8000e18:	2201      	movs	r2, #1
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	4805      	ldr	r0, [pc, #20]	; (8000e34 <adc_initialize+0x48>)
 8000e1e:	f7ff fc86 	bl	800072e <ADC_RegularChannelConfig>
	ADC_Cmd(ADC1, ENABLE); // Activates the ADC peripheral
 8000e22:	2101      	movs	r1, #1
 8000e24:	4803      	ldr	r0, [pc, #12]	; (8000e34 <adc_initialize+0x48>)
 8000e26:	f7ff fc66 	bl	80006f6 <ADC_Cmd>


	// Can then use _GetMultiModeConversionValue() to get the value

}
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	40012000 	.word	0x40012000

08000e38 <vApplicationStackOverflowHook>:
	for( ;; );
}
/*-----------------------------------------------------------*/

void vApplicationStackOverflowHook( xTaskHandle pxTask, signed char *pcTaskName )
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
	/* Run time stack overflow checking is performed if
	configconfigCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2.  This hook
	function is called if a stack overflow is detected.  pxCurrentTCB can be
	inspected in the debugger if the task name passed into this function is
	corrupt. */
	for( ;; );
 8000e42:	e7fe      	b.n	8000e42 <vApplicationStackOverflowHook+0xa>

08000e44 <prvSetupHardware>:
	}
}
/*-----------------------------------------------------------*/

static void prvSetupHardware( void )
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
	/* Ensure all priority bits are assigned as preemption priority bits.
	http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	NVIC_SetPriorityGrouping( 0 );
 8000e48:	2000      	movs	r0, #0
 8000e4a:	f7ff ff87 	bl	8000d5c <NVIC_SetPriorityGrouping>
	/* TODO: Setup the clocks, etc. here, if they were not configured before
	main() was called. */


	// Disable the PLL
	RCC->CR &= ~(RCC_CR_PLLON);
 8000e4e:	4a18      	ldr	r2, [pc, #96]	; (8000eb0 <prvSetupHardware+0x6c>)
 8000e50:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <prvSetupHardware+0x6c>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000e58:	6013      	str	r3, [r2, #0]
	// Wait for the PLL to unlock
	while (!( RCC->CR & RCC_CR_PLLRDY ));
 8000e5a:	bf00      	nop
 8000e5c:	4b14      	ldr	r3, [pc, #80]	; (8000eb0 <prvSetupHardware+0x6c>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d0f9      	beq.n	8000e5c <prvSetupHardware+0x18>


	// Configure the PLL for 48-MHz system clock
	RCC->CFGR = 0x00280000;
 8000e68:	4b11      	ldr	r3, [pc, #68]	; (8000eb0 <prvSetupHardware+0x6c>)
 8000e6a:	f44f 1220 	mov.w	r2, #2621440	; 0x280000
 8000e6e:	609a      	str	r2, [r3, #8]
	// Enable the PLL
	RCC->CR |= RCC_CR_PLLON;
 8000e70:	4a0f      	ldr	r2, [pc, #60]	; (8000eb0 <prvSetupHardware+0x6c>)
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <prvSetupHardware+0x6c>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e7a:	6013      	str	r3, [r2, #0]
	// Wait for the PLL to lock
	while (( RCC->CR & RCC_CR_PLLRDY ) != RCC_CR_PLLRDY );
 8000e7c:	bf00      	nop
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <prvSetupHardware+0x6c>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000e8a:	d1f8      	bne.n	8000e7e <prvSetupHardware+0x3a>
	// Switch the processor to the PLL clock source
	RCC->CFGR = ( RCC->CFGR & (~RCC_CFGR_SW)) | RCC_CFGR_SW_PLL;
 8000e8c:	4a08      	ldr	r2, [pc, #32]	; (8000eb0 <prvSetupHardware+0x6c>)
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <prvSetupHardware+0x6c>)
 8000e90:	689b      	ldr	r3, [r3, #8]
 8000e92:	f023 0303 	bic.w	r3, r3, #3
 8000e96:	f043 0302 	orr.w	r3, r3, #2
 8000e9a:	6093      	str	r3, [r2, #8]
	// Update the system with the new clock frequency
	SystemCoreClockUpdate();
 8000e9c:	f000 f976 	bl	800118c <SystemCoreClockUpdate>


	/* Enable clock for TIM2 peripheral */
	// Relevant register: RCC->APB1ENR (Defined as TIM2CLK)
	RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 8000ea0:	4a03      	ldr	r2, [pc, #12]	; (8000eb0 <prvSetupHardware+0x6c>)
 8000ea2:	4b03      	ldr	r3, [pc, #12]	; (8000eb0 <prvSetupHardware+0x6c>)
 8000ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ea6:	f043 0301 	orr.w	r3, r3, #1
 8000eaa:	6413      	str	r3, [r2, #64]	; 0x40

}
 8000eac:	bf00      	nop
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	40023800 	.word	0x40023800

08000eb4 <GPIO_Setup>:

static void GPIO_Setup( void )
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
	// Enable GPIOA Clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000eb8:	4a50      	ldr	r2, [pc, #320]	; (8000ffc <GPIO_Setup+0x148>)
 8000eba:	4b50      	ldr	r3, [pc, #320]	; (8000ffc <GPIO_Setup+0x148>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ebe:	f043 0301 	orr.w	r3, r3, #1
 8000ec2:	6313      	str	r3, [r2, #48]	; 0x30
	// Enable GPIOC Clock
	RCC->AHB1ENR |= RCC_AHB1ENR_GPIOCEN;
 8000ec4:	4a4d      	ldr	r2, [pc, #308]	; (8000ffc <GPIO_Setup+0x148>)
 8000ec6:	4b4d      	ldr	r3, [pc, #308]	; (8000ffc <GPIO_Setup+0x148>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	f043 0304 	orr.w	r3, r3, #4
 8000ece:	6313      	str	r3, [r2, #48]	; 0x30

	// Setting up PA0 as analog high-speed input (For ADC)
	// Relevant register: GPIOA->MODER (Defined as PA0Mode)
	GPIOA->MODER |= GPIO_MODER_MODER0;
 8000ed0:	4a4b      	ldr	r2, [pc, #300]	; (8001000 <GPIO_Setup+0x14c>)
 8000ed2:	4b4b      	ldr	r3, [pc, #300]	; (8001000 <GPIO_Setup+0x14c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	f043 0303 	orr.w	r3, r3, #3
 8000eda:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (GPIO_MODER_MODER0_0 | GPIO_MODER_MODER0_1); // Setting it to 0x11 for analog mode
 8000edc:	4a48      	ldr	r2, [pc, #288]	; (8001000 <GPIO_Setup+0x14c>)
 8000ede:	4b48      	ldr	r3, [pc, #288]	; (8001000 <GPIO_Setup+0x14c>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f043 0303 	orr.w	r3, r3, #3
 8000ee6:	6013      	str	r3, [r2, #0]
	GPIOA->PUPDR &= ~(GPIO_PUPDR_PUPDR0);
 8000ee8:	4a45      	ldr	r2, [pc, #276]	; (8001000 <GPIO_Setup+0x14c>)
 8000eea:	4b45      	ldr	r3, [pc, #276]	; (8001000 <GPIO_Setup+0x14c>)
 8000eec:	68db      	ldr	r3, [r3, #12]
 8000eee:	f023 0303 	bic.w	r3, r3, #3
 8000ef2:	60d3      	str	r3, [r2, #12]


	// Setting up PC0 as output (Red traffic light)
	// Relevant register: GPIOC->MODER (Defined as PC0Mode)
	GPIOC->MODER |= GPIO_MODER_MODER0;
 8000ef4:	4a43      	ldr	r2, [pc, #268]	; (8001004 <GPIO_Setup+0x150>)
 8000ef6:	4b43      	ldr	r3, [pc, #268]	; (8001004 <GPIO_Setup+0x150>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f043 0303 	orr.w	r3, r3, #3
 8000efe:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODER0); // Setting it to output mode
 8000f00:	4a40      	ldr	r2, [pc, #256]	; (8001004 <GPIO_Setup+0x150>)
 8000f02:	4b40      	ldr	r3, [pc, #256]	; (8001004 <GPIO_Setup+0x150>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	f023 0303 	bic.w	r3, r3, #3
 8000f0a:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR0);
 8000f0c:	4a3d      	ldr	r2, [pc, #244]	; (8001004 <GPIO_Setup+0x150>)
 8000f0e:	4b3d      	ldr	r3, [pc, #244]	; (8001004 <GPIO_Setup+0x150>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	f023 0303 	bic.w	r3, r3, #3
 8000f16:	60d3      	str	r3, [r2, #12]

	// Setting up PC1 as output (Amber traffic light)
	// Relevant register: GPIOC->MODER (Defined as PC0Mode)
	GPIOC->MODER |= GPIO_MODER_MODER1;
 8000f18:	4a3a      	ldr	r2, [pc, #232]	; (8001004 <GPIO_Setup+0x150>)
 8000f1a:	4b3a      	ldr	r3, [pc, #232]	; (8001004 <GPIO_Setup+0x150>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f043 030c 	orr.w	r3, r3, #12
 8000f22:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODER1); // Setting it to output mode
 8000f24:	4a37      	ldr	r2, [pc, #220]	; (8001004 <GPIO_Setup+0x150>)
 8000f26:	4b37      	ldr	r3, [pc, #220]	; (8001004 <GPIO_Setup+0x150>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f023 030c 	bic.w	r3, r3, #12
 8000f2e:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR1);
 8000f30:	4a34      	ldr	r2, [pc, #208]	; (8001004 <GPIO_Setup+0x150>)
 8000f32:	4b34      	ldr	r3, [pc, #208]	; (8001004 <GPIO_Setup+0x150>)
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	f023 030c 	bic.w	r3, r3, #12
 8000f3a:	60d3      	str	r3, [r2, #12]

	// Setting up PC2 as output (Green traffic light)
	// Relevant register: GPIOC->MODER (Defined as PC0Mode)
	GPIOC->MODER |= GPIO_MODER_MODER2;
 8000f3c:	4a31      	ldr	r2, [pc, #196]	; (8001004 <GPIO_Setup+0x150>)
 8000f3e:	4b31      	ldr	r3, [pc, #196]	; (8001004 <GPIO_Setup+0x150>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000f46:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODER2); // Setting it to output mode
 8000f48:	4a2e      	ldr	r2, [pc, #184]	; (8001004 <GPIO_Setup+0x150>)
 8000f4a:	4b2e      	ldr	r3, [pc, #184]	; (8001004 <GPIO_Setup+0x150>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f52:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR2);
 8000f54:	4a2b      	ldr	r2, [pc, #172]	; (8001004 <GPIO_Setup+0x150>)
 8000f56:	4b2b      	ldr	r3, [pc, #172]	; (8001004 <GPIO_Setup+0x150>)
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000f5e:	60d3      	str	r3, [r2, #12]

	// Setting up PC3 as input (Potentiometer)
	// Relevant register: GPIOC->MODER (Defined as PC0Mode)
	GPIOC->MODER |= GPIO_MODER_MODER3;
 8000f60:	4a28      	ldr	r2, [pc, #160]	; (8001004 <GPIO_Setup+0x150>)
 8000f62:	4b28      	ldr	r3, [pc, #160]	; (8001004 <GPIO_Setup+0x150>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000f6a:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODER3); // Setting it to Input mode <--- might not be correct!
 8000f6c:	4a25      	ldr	r2, [pc, #148]	; (8001004 <GPIO_Setup+0x150>)
 8000f6e:	4b25      	ldr	r3, [pc, #148]	; (8001004 <GPIO_Setup+0x150>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000f76:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR3);
 8000f78:	4a22      	ldr	r2, [pc, #136]	; (8001004 <GPIO_Setup+0x150>)
 8000f7a:	4b22      	ldr	r3, [pc, #136]	; (8001004 <GPIO_Setup+0x150>)
 8000f7c:	68db      	ldr	r3, [r3, #12]
 8000f7e:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8000f82:	60d3      	str	r3, [r2, #12]

	// Setting up PC6 as output (Shift register data)
	// Relevant register: GPIOC->MODER (Defined as PC0Mode)
	GPIOC->MODER |= GPIO_MODER_MODER6;
 8000f84:	4a1f      	ldr	r2, [pc, #124]	; (8001004 <GPIO_Setup+0x150>)
 8000f86:	4b1f      	ldr	r3, [pc, #124]	; (8001004 <GPIO_Setup+0x150>)
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 8000f8e:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODER6); // Setting it to output mode
 8000f90:	4a1c      	ldr	r2, [pc, #112]	; (8001004 <GPIO_Setup+0x150>)
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <GPIO_Setup+0x150>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f9a:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR6);
 8000f9c:	4a19      	ldr	r2, [pc, #100]	; (8001004 <GPIO_Setup+0x150>)
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <GPIO_Setup+0x150>)
 8000fa0:	68db      	ldr	r3, [r3, #12]
 8000fa2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000fa6:	60d3      	str	r3, [r2, #12]

	// Setting up PC7 as output (Shift register clock)
	// Relevant register: GPIOC->MODER (Defined as PC0Mode)
	GPIOC->MODER |= GPIO_MODER_MODER7;
 8000fa8:	4a16      	ldr	r2, [pc, #88]	; (8001004 <GPIO_Setup+0x150>)
 8000faa:	4b16      	ldr	r3, [pc, #88]	; (8001004 <GPIO_Setup+0x150>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fb2:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODER7); // Setting it to output mode
 8000fb4:	4a13      	ldr	r2, [pc, #76]	; (8001004 <GPIO_Setup+0x150>)
 8000fb6:	4b13      	ldr	r3, [pc, #76]	; (8001004 <GPIO_Setup+0x150>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fbe:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR7);
 8000fc0:	4a10      	ldr	r2, [pc, #64]	; (8001004 <GPIO_Setup+0x150>)
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <GPIO_Setup+0x150>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000fca:	60d3      	str	r3, [r2, #12]

	// Setting up PC8 as output (Shift register reset)
	// Relevant register: GPIOC->MODER (Defined as PC0Mode)
	GPIOC->MODER |= GPIO_MODER_MODER8;
 8000fcc:	4a0d      	ldr	r2, [pc, #52]	; (8001004 <GPIO_Setup+0x150>)
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <GPIO_Setup+0x150>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 8000fd6:	6013      	str	r3, [r2, #0]
	GPIOC->MODER &= ~(GPIO_MODER_MODER8); // Setting it to output mode
 8000fd8:	4a0a      	ldr	r2, [pc, #40]	; (8001004 <GPIO_Setup+0x150>)
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <GPIO_Setup+0x150>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000fe2:	6013      	str	r3, [r2, #0]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR8);
 8000fe4:	4a07      	ldr	r2, [pc, #28]	; (8001004 <GPIO_Setup+0x150>)
 8000fe6:	4b07      	ldr	r3, [pc, #28]	; (8001004 <GPIO_Setup+0x150>)
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8000fee:	60d3      	str	r3, [r2, #12]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40023800 	.word	0x40023800
 8001000:	40020000 	.word	0x40020000
 8001004:	40020800 	.word	0x40020800

08001008 <Reset_Handler>:
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001008:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800100a:	e003      	b.n	8001014 <LoopCopyDataInit>

0800100c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800100c:	4b0b      	ldr	r3, [pc, #44]	; (800103c <LoopFillZerobss+0x14>)
  ldr  r3, [r3, r1]
 800100e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001010:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001012:	3104      	adds	r1, #4

08001014 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001014:	480a      	ldr	r0, [pc, #40]	; (8001040 <LoopFillZerobss+0x18>)
  ldr  r3, =_edata
 8001016:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <LoopFillZerobss+0x1c>)
  adds  r2, r0, r1
 8001018:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800101a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800101c:	d3f6      	bcc.n	800100c <CopyDataInit>
  ldr  r2, =_sbss
 800101e:	4a0a      	ldr	r2, [pc, #40]	; (8001048 <LoopFillZerobss+0x20>)
  b  LoopFillZerobss
 8001020:	e002      	b.n	8001028 <LoopFillZerobss>

08001022 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001022:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001024:	f842 3b04 	str.w	r3, [r2], #4

08001028 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001028:	4b08      	ldr	r3, [pc, #32]	; (800104c <LoopFillZerobss+0x24>)
  cmp  r2, r3
 800102a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800102c:	d3f9      	bcc.n	8001022 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800102e:	f000 f877 	bl	8001120 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001032:	f000 fb63 	bl	80016fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001036:	f7ff feb5 	bl	8000da4 <main>
  bx  lr    
 800103a:	4770      	bx	lr
  ldr  r3, =_sidata
 800103c:	08001778 	.word	0x08001778
  ldr  r0, =_sdata
 8001040:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001044:	20000024 	.word	0x20000024
  ldr  r2, =_sbss
 8001048:	20000024 	.word	0x20000024
  ldr  r3, = _ebss
 800104c:	20000148 	.word	0x20000148

08001050 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001050:	e7fe      	b.n	8001050 <ADC_IRQHandler>

08001052 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001064:	e7fe      	b.n	8001064 <HardFault_Handler+0x4>

08001066 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800106a:	e7fe      	b.n	800106a <MemManage_Handler+0x4>

0800106c <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8001070:	e7fe      	b.n	8001070 <BusFault_Handler+0x4>

08001072 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001076:	e7fe      	b.n	8001076 <UsageFault_Handler+0x4>

08001078 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
	...

08001088 <ITM_SendChar>:

    \param [in]     ch  Character to transmit
    \return             Character to transmit
 */
static __INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <ITM_SendChar+0x58>)
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d01a      	beq.n	80010d2 <ITM_SendChar+0x4a>
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 800109c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010a0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80010a4:	f003 0301 	and.w	r3, r3, #1
  if ((CoreDebug->DEMCR & CoreDebug_DEMCR_TRCENA_Msk)  &&      /* Trace enabled */
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d012      	beq.n	80010d2 <ITM_SendChar+0x4a>
      (ITM->TER & (1UL << 0)        )                    )     /* ITM Port #0 enabled */
 80010ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010b0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80010b4:	f003 0301 	and.w	r3, r3, #1
      (ITM->TCR & ITM_TCR_ITMENA_Msk)                  &&      /* ITM enabled */
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d00a      	beq.n	80010d2 <ITM_SendChar+0x4a>
  {
    while (ITM->PORT[0].u32 == 0);
 80010bc:	bf00      	nop
 80010be:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d0fa      	beq.n	80010be <ITM_SendChar+0x36>
    ITM->PORT[0].u8 = (uint8_t) ch;
 80010c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	b2d2      	uxtb	r2, r2
 80010d0:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80010d2:	687b      	ldr	r3, [r7, #4]
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000edf0 	.word	0xe000edf0

080010e4 <_write>:
{
	while (1) {}		/* Make sure we hang here */
}

int _write(int file, char *ptr, int len)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	60f8      	str	r0, [r7, #12]
 80010ec:	60b9      	str	r1, [r7, #8]
 80010ee:	607a      	str	r2, [r7, #4]
 /* Implement your write code here, this is used by
puts and printf for example */
 int i=0;
 80010f0:	2300      	movs	r3, #0
 80010f2:	617b      	str	r3, [r7, #20]
 for(i=0 ; i<len ; i++)
 80010f4:	2300      	movs	r3, #0
 80010f6:	617b      	str	r3, [r7, #20]
 80010f8:	e009      	b.n	800110e <_write+0x2a>
	 ITM_SendChar((*ptr++));
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	1c5a      	adds	r2, r3, #1
 80010fe:	60ba      	str	r2, [r7, #8]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff ffc0 	bl	8001088 <ITM_SendChar>
 for(i=0 ; i<len ; i++)
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	3301      	adds	r3, #1
 800110c:	617b      	str	r3, [r7, #20]
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	429a      	cmp	r2, r3
 8001114:	dbf1      	blt.n	80010fa <_write+0x16>
 return len;
 8001116:	687b      	ldr	r3, [r7, #4]
}
 8001118:	4618      	mov	r0, r3
 800111a:	3718      	adds	r7, #24
 800111c:	46bd      	mov	sp, r7
 800111e:	bd80      	pop	{r7, pc}

08001120 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001124:	4a16      	ldr	r2, [pc, #88]	; (8001180 <SystemInit+0x60>)
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <SystemInit+0x60>)
 8001128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800112c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001130:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001134:	4a13      	ldr	r2, [pc, #76]	; (8001184 <SystemInit+0x64>)
 8001136:	4b13      	ldr	r3, [pc, #76]	; (8001184 <SystemInit+0x64>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <SystemInit+0x64>)
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001146:	4a0f      	ldr	r2, [pc, #60]	; (8001184 <SystemInit+0x64>)
 8001148:	4b0e      	ldr	r3, [pc, #56]	; (8001184 <SystemInit+0x64>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001150:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001154:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001156:	4b0b      	ldr	r3, [pc, #44]	; (8001184 <SystemInit+0x64>)
 8001158:	4a0b      	ldr	r2, [pc, #44]	; (8001188 <SystemInit+0x68>)
 800115a:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 800115c:	4a09      	ldr	r2, [pc, #36]	; (8001184 <SystemInit+0x64>)
 800115e:	4b09      	ldr	r3, [pc, #36]	; (8001184 <SystemInit+0x64>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001166:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001168:	4b06      	ldr	r3, [pc, #24]	; (8001184 <SystemInit+0x64>)
 800116a:	2200      	movs	r2, #0
 800116c:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 800116e:	f000 f889 	bl	8001284 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001172:	4b03      	ldr	r3, [pc, #12]	; (8001180 <SystemInit+0x60>)
 8001174:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001178:	609a      	str	r2, [r3, #8]
#endif
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00
 8001184:	40023800 	.word	0x40023800
 8001188:	24003010 	.word	0x24003010

0800118c <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 800118c:	b480      	push	{r7}
 800118e:	b087      	sub	sp, #28
 8001190:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
 800119a:	2302      	movs	r3, #2
 800119c:	60fb      	str	r3, [r7, #12]
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
 80011a2:	2302      	movs	r3, #2
 80011a4:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80011a6:	4b32      	ldr	r3, [pc, #200]	; (8001270 <SystemCoreClockUpdate+0xe4>)
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 030c 	and.w	r3, r3, #12
 80011ae:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	2b04      	cmp	r3, #4
 80011b4:	d007      	beq.n	80011c6 <SystemCoreClockUpdate+0x3a>
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d009      	beq.n	80011ce <SystemCoreClockUpdate+0x42>
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d13d      	bne.n	800123a <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80011be:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <SystemCoreClockUpdate+0xe8>)
 80011c0:	4a2d      	ldr	r2, [pc, #180]	; (8001278 <SystemCoreClockUpdate+0xec>)
 80011c2:	601a      	str	r2, [r3, #0]
      break;
 80011c4:	e03d      	b.n	8001242 <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80011c6:	4b2b      	ldr	r3, [pc, #172]	; (8001274 <SystemCoreClockUpdate+0xe8>)
 80011c8:	4a2c      	ldr	r2, [pc, #176]	; (800127c <SystemCoreClockUpdate+0xf0>)
 80011ca:	601a      	str	r2, [r3, #0]
      break;
 80011cc:	e039      	b.n	8001242 <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80011ce:	4b28      	ldr	r3, [pc, #160]	; (8001270 <SystemCoreClockUpdate+0xe4>)
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	0d9b      	lsrs	r3, r3, #22
 80011d4:	f003 0301 	and.w	r3, r3, #1
 80011d8:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80011da:	4b25      	ldr	r3, [pc, #148]	; (8001270 <SystemCoreClockUpdate+0xe4>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80011e2:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d00c      	beq.n	8001204 <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80011ea:	4a24      	ldr	r2, [pc, #144]	; (800127c <SystemCoreClockUpdate+0xf0>)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80011f2:	4a1f      	ldr	r2, [pc, #124]	; (8001270 <SystemCoreClockUpdate+0xe4>)
 80011f4:	6852      	ldr	r2, [r2, #4]
 80011f6:	0992      	lsrs	r2, r2, #6
 80011f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80011fc:	fb02 f303 	mul.w	r3, r2, r3
 8001200:	617b      	str	r3, [r7, #20]
 8001202:	e00b      	b.n	800121c <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8001204:	4a1c      	ldr	r2, [pc, #112]	; (8001278 <SystemCoreClockUpdate+0xec>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	fbb2 f3f3 	udiv	r3, r2, r3
 800120c:	4a18      	ldr	r2, [pc, #96]	; (8001270 <SystemCoreClockUpdate+0xe4>)
 800120e:	6852      	ldr	r2, [r2, #4]
 8001210:	0992      	lsrs	r2, r2, #6
 8001212:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001216:	fb02 f303 	mul.w	r3, r2, r3
 800121a:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800121c:	4b14      	ldr	r3, [pc, #80]	; (8001270 <SystemCoreClockUpdate+0xe4>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	0c1b      	lsrs	r3, r3, #16
 8001222:	f003 0303 	and.w	r3, r3, #3
 8001226:	3301      	adds	r3, #1
 8001228:	005b      	lsls	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	fbb2 f3f3 	udiv	r3, r2, r3
 8001234:	4a0f      	ldr	r2, [pc, #60]	; (8001274 <SystemCoreClockUpdate+0xe8>)
 8001236:	6013      	str	r3, [r2, #0]
      break;
 8001238:	e003      	b.n	8001242 <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <SystemCoreClockUpdate+0xe8>)
 800123c:	4a0e      	ldr	r2, [pc, #56]	; (8001278 <SystemCoreClockUpdate+0xec>)
 800123e:	601a      	str	r2, [r3, #0]
      break;
 8001240:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8001242:	4b0b      	ldr	r3, [pc, #44]	; (8001270 <SystemCoreClockUpdate+0xe4>)
 8001244:	689b      	ldr	r3, [r3, #8]
 8001246:	091b      	lsrs	r3, r3, #4
 8001248:	f003 030f 	and.w	r3, r3, #15
 800124c:	4a0c      	ldr	r2, [pc, #48]	; (8001280 <SystemCoreClockUpdate+0xf4>)
 800124e:	5cd3      	ldrb	r3, [r2, r3]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <SystemCoreClockUpdate+0xe8>)
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	fa22 f303 	lsr.w	r3, r2, r3
 800125e:	4a05      	ldr	r2, [pc, #20]	; (8001274 <SystemCoreClockUpdate+0xe8>)
 8001260:	6013      	str	r3, [r2, #0]
}
 8001262:	bf00      	nop
 8001264:	371c      	adds	r7, #28
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop
 8001270:	40023800 	.word	0x40023800
 8001274:	20000010 	.word	0x20000010
 8001278:	00f42400 	.word	0x00f42400
 800127c:	007a1200 	.word	0x007a1200
 8001280:	20000014 	.word	0x20000014

08001284 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8001284:	b480      	push	{r7}
 8001286:	b083      	sub	sp, #12
 8001288:	af00      	add	r7, sp, #0
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	2300      	movs	r3, #0
 8001290:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 8001292:	4a36      	ldr	r2, [pc, #216]	; (800136c <SetSysClock+0xe8>)
 8001294:	4b35      	ldr	r3, [pc, #212]	; (800136c <SetSysClock+0xe8>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800129c:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800129e:	4b33      	ldr	r3, [pc, #204]	; (800136c <SetSysClock+0xe8>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012a6:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3301      	adds	r3, #1
 80012ac:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d103      	bne.n	80012bc <SetSysClock+0x38>
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80012ba:	d1f0      	bne.n	800129e <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 80012bc:	4b2b      	ldr	r3, [pc, #172]	; (800136c <SetSysClock+0xe8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d002      	beq.n	80012ce <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 80012c8:	2301      	movs	r3, #1
 80012ca:	603b      	str	r3, [r7, #0]
 80012cc:	e001      	b.n	80012d2 <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 80012ce:	2300      	movs	r3, #0
 80012d0:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	2b01      	cmp	r3, #1
 80012d6:	d142      	bne.n	800135e <SetSysClock+0xda>
  {
    /* Enable high performance mode, System frequency up to 168 MHz */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 80012d8:	4a24      	ldr	r2, [pc, #144]	; (800136c <SetSysClock+0xe8>)
 80012da:	4b24      	ldr	r3, [pc, #144]	; (800136c <SetSysClock+0xe8>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012e2:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_PMODE;  
 80012e4:	4a22      	ldr	r2, [pc, #136]	; (8001370 <SetSysClock+0xec>)
 80012e6:	4b22      	ldr	r3, [pc, #136]	; (8001370 <SetSysClock+0xec>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012ee:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 80012f0:	4a1e      	ldr	r2, [pc, #120]	; (800136c <SetSysClock+0xe8>)
 80012f2:	4b1e      	ldr	r3, [pc, #120]	; (800136c <SetSysClock+0xe8>)
 80012f4:	689b      	ldr	r3, [r3, #8]
 80012f6:	6093      	str	r3, [r2, #8]
      
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 80012f8:	4a1c      	ldr	r2, [pc, #112]	; (800136c <SetSysClock+0xe8>)
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <SetSysClock+0xe8>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001302:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 8001304:	4a19      	ldr	r2, [pc, #100]	; (800136c <SetSysClock+0xe8>)
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <SetSysClock+0xe8>)
 8001308:	689b      	ldr	r3, [r3, #8]
 800130a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800130e:	6093      	str	r3, [r2, #8]

    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 8001310:	4b16      	ldr	r3, [pc, #88]	; (800136c <SetSysClock+0xe8>)
 8001312:	4a18      	ldr	r2, [pc, #96]	; (8001374 <SetSysClock+0xf0>)
 8001314:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);

    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 8001316:	4a15      	ldr	r2, [pc, #84]	; (800136c <SetSysClock+0xe8>)
 8001318:	4b14      	ldr	r3, [pc, #80]	; (800136c <SetSysClock+0xe8>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001320:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 8001322:	bf00      	nop
 8001324:	4b11      	ldr	r3, [pc, #68]	; (800136c <SetSysClock+0xe8>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800132c:	2b00      	cmp	r3, #0
 800132e:	d0f9      	beq.n	8001324 <SetSysClock+0xa0>
    {
    }
   
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8001330:	4b11      	ldr	r3, [pc, #68]	; (8001378 <SetSysClock+0xf4>)
 8001332:	f240 6205 	movw	r2, #1541	; 0x605
 8001336:	601a      	str	r2, [r3, #0]

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8001338:	4a0c      	ldr	r2, [pc, #48]	; (800136c <SetSysClock+0xe8>)
 800133a:	4b0c      	ldr	r3, [pc, #48]	; (800136c <SetSysClock+0xe8>)
 800133c:	689b      	ldr	r3, [r3, #8]
 800133e:	f023 0303 	bic.w	r3, r3, #3
 8001342:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8001344:	4a09      	ldr	r2, [pc, #36]	; (800136c <SetSysClock+0xe8>)
 8001346:	4b09      	ldr	r3, [pc, #36]	; (800136c <SetSysClock+0xe8>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f043 0302 	orr.w	r3, r3, #2
 800134e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL)
 8001350:	bf00      	nop
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <SetSysClock+0xe8>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 030c 	and.w	r3, r3, #12
 800135a:	2b08      	cmp	r3, #8
 800135c:	d1f9      	bne.n	8001352 <SetSysClock+0xce>
  else
  { /* If HSE fails to start-up, the application will have wrong clock
         configuration. User can add here some code to deal with this error */
  }

}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40023800 	.word	0x40023800
 8001370:	40007000 	.word	0x40007000
 8001374:	07405408 	.word	0x07405408
 8001378:	40023c00 	.word	0x40023c00

0800137c <ts_itoa>:
**  Abstract: Convert integer to ascii
**  Returns:  void
**---------------------------------------------------------------------------
*/
void ts_itoa(char **buf, unsigned int d, int base)
{
 800137c:	b480      	push	{r7}
 800137e:	b087      	sub	sp, #28
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
	int div = 1;
 8001388:	2301      	movs	r3, #1
 800138a:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 800138c:	e004      	b.n	8001398 <ts_itoa+0x1c>
		div *= base;
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	fb02 f303 	mul.w	r3, r2, r3
 8001396:	617b      	str	r3, [r7, #20]
	while (d/div >= base)
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	fbb2 f2f3 	udiv	r2, r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	429a      	cmp	r2, r3
 80013a4:	d2f3      	bcs.n	800138e <ts_itoa+0x12>

	while (div != 0)
 80013a6:	e029      	b.n	80013fc <ts_itoa+0x80>
	{
		int num = d/div;
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b0:	613b      	str	r3, [r7, #16]
		d = d%div;
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	fbb3 f1f2 	udiv	r1, r3, r2
 80013ba:	fb02 f201 	mul.w	r2, r2, r1
 80013be:	1a9b      	subs	r3, r3, r2
 80013c0:	60bb      	str	r3, [r7, #8]
		div /= base;
 80013c2:	697a      	ldr	r2, [r7, #20]
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80013ca:	617b      	str	r3, [r7, #20]
		if (num > 9)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	2b09      	cmp	r3, #9
 80013d0:	dd0a      	ble.n	80013e8 <ts_itoa+0x6c>
			*((*buf)++) = (num-10) + 'A';
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	1c59      	adds	r1, r3, #1
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	6011      	str	r1, [r2, #0]
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	b2d2      	uxtb	r2, r2
 80013e0:	3237      	adds	r2, #55	; 0x37
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	701a      	strb	r2, [r3, #0]
 80013e6:	e009      	b.n	80013fc <ts_itoa+0x80>
		else
			*((*buf)++) = num + '0';
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	1c59      	adds	r1, r3, #1
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	6011      	str	r1, [r2, #0]
 80013f2:	693a      	ldr	r2, [r7, #16]
 80013f4:	b2d2      	uxtb	r2, r2
 80013f6:	3230      	adds	r2, #48	; 0x30
 80013f8:	b2d2      	uxtb	r2, r2
 80013fa:	701a      	strb	r2, [r3, #0]
	while (div != 0)
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1d2      	bne.n	80013a8 <ts_itoa+0x2c>
	}
}
 8001402:	bf00      	nop
 8001404:	371c      	adds	r7, #28
 8001406:	46bd      	mov	sp, r7
 8001408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140c:	4770      	bx	lr

0800140e <ts_formatstring>:
**  Abstract: Writes arguments va to buffer buf according to format fmt
**  Returns:  Length of string
**---------------------------------------------------------------------------
*/
int ts_formatstring(char *buf, const char *fmt, va_list va)
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b088      	sub	sp, #32
 8001412:	af00      	add	r7, sp, #0
 8001414:	60f8      	str	r0, [r7, #12]
 8001416:	60b9      	str	r1, [r7, #8]
 8001418:	607a      	str	r2, [r7, #4]
	char *start_buf = buf;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	617b      	str	r3, [r7, #20]
	while(*fmt)
 800141e:	e07d      	b.n	800151c <ts_formatstring+0x10e>
	{
		/* Character needs formating? */
		if (*fmt == '%')
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	2b25      	cmp	r3, #37	; 0x25
 8001426:	d171      	bne.n	800150c <ts_formatstring+0xfe>
		{
			switch (*(++fmt))
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	3301      	adds	r3, #1
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b64      	cmp	r3, #100	; 0x64
 8001434:	d01e      	beq.n	8001474 <ts_formatstring+0x66>
 8001436:	2b64      	cmp	r3, #100	; 0x64
 8001438:	dc06      	bgt.n	8001448 <ts_formatstring+0x3a>
 800143a:	2b58      	cmp	r3, #88	; 0x58
 800143c:	d050      	beq.n	80014e0 <ts_formatstring+0xd2>
 800143e:	2b63      	cmp	r3, #99	; 0x63
 8001440:	d00e      	beq.n	8001460 <ts_formatstring+0x52>
 8001442:	2b25      	cmp	r3, #37	; 0x25
 8001444:	d058      	beq.n	80014f8 <ts_formatstring+0xea>
 8001446:	e05d      	b.n	8001504 <ts_formatstring+0xf6>
 8001448:	2b73      	cmp	r3, #115	; 0x73
 800144a:	d02b      	beq.n	80014a4 <ts_formatstring+0x96>
 800144c:	2b73      	cmp	r3, #115	; 0x73
 800144e:	dc02      	bgt.n	8001456 <ts_formatstring+0x48>
 8001450:	2b69      	cmp	r3, #105	; 0x69
 8001452:	d00f      	beq.n	8001474 <ts_formatstring+0x66>
 8001454:	e056      	b.n	8001504 <ts_formatstring+0xf6>
 8001456:	2b75      	cmp	r3, #117	; 0x75
 8001458:	d037      	beq.n	80014ca <ts_formatstring+0xbc>
 800145a:	2b78      	cmp	r3, #120	; 0x78
 800145c:	d040      	beq.n	80014e0 <ts_formatstring+0xd2>
 800145e:	e051      	b.n	8001504 <ts_formatstring+0xf6>
			{
			  case 'c':
				*buf++ = va_arg(va, int);
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	1c5a      	adds	r2, r3, #1
 8001464:	60fa      	str	r2, [r7, #12]
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	1d11      	adds	r1, r2, #4
 800146a:	6079      	str	r1, [r7, #4]
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	b2d2      	uxtb	r2, r2
 8001470:	701a      	strb	r2, [r3, #0]
				break;
 8001472:	e047      	b.n	8001504 <ts_formatstring+0xf6>
			  case 'd':
			  case 'i':
				{
					signed int val = va_arg(va, signed int);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	1d1a      	adds	r2, r3, #4
 8001478:	607a      	str	r2, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	61fb      	str	r3, [r7, #28]
					if (val < 0)
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	2b00      	cmp	r3, #0
 8001482:	da07      	bge.n	8001494 <ts_formatstring+0x86>
					{
						val *= -1;
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	425b      	negs	r3, r3
 8001488:	61fb      	str	r3, [r7, #28]
						*buf++ = '-';
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	60fa      	str	r2, [r7, #12]
 8001490:	222d      	movs	r2, #45	; 0x2d
 8001492:	701a      	strb	r2, [r3, #0]
					}
					ts_itoa(&buf, val, 10);
 8001494:	69f9      	ldr	r1, [r7, #28]
 8001496:	f107 030c 	add.w	r3, r7, #12
 800149a:	220a      	movs	r2, #10
 800149c:	4618      	mov	r0, r3
 800149e:	f7ff ff6d 	bl	800137c <ts_itoa>
				}
				break;
 80014a2:	e02f      	b.n	8001504 <ts_formatstring+0xf6>
			  case 's':
				{
					char * arg = va_arg(va, char *);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	1d1a      	adds	r2, r3, #4
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	61bb      	str	r3, [r7, #24]
					while (*arg)
 80014ae:	e007      	b.n	80014c0 <ts_formatstring+0xb2>
					{
						*buf++ = *arg++;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1c5a      	adds	r2, r3, #1
 80014b4:	60fa      	str	r2, [r7, #12]
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	1c51      	adds	r1, r2, #1
 80014ba:	61b9      	str	r1, [r7, #24]
 80014bc:	7812      	ldrb	r2, [r2, #0]
 80014be:	701a      	strb	r2, [r3, #0]
					while (*arg)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d1f3      	bne.n	80014b0 <ts_formatstring+0xa2>
					}
				}
				break;
 80014c8:	e01c      	b.n	8001504 <ts_formatstring+0xf6>
			  case 'u':
					ts_itoa(&buf, va_arg(va, unsigned int), 10);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	1d1a      	adds	r2, r3, #4
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	6819      	ldr	r1, [r3, #0]
 80014d2:	f107 030c 	add.w	r3, r7, #12
 80014d6:	220a      	movs	r2, #10
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff4f 	bl	800137c <ts_itoa>
				break;
 80014de:	e011      	b.n	8001504 <ts_formatstring+0xf6>
			  case 'x':
			  case 'X':
					ts_itoa(&buf, va_arg(va, int), 16);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	1d1a      	adds	r2, r3, #4
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4619      	mov	r1, r3
 80014ea:	f107 030c 	add.w	r3, r7, #12
 80014ee:	2210      	movs	r2, #16
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff43 	bl	800137c <ts_itoa>
				break;
 80014f6:	e005      	b.n	8001504 <ts_formatstring+0xf6>
			  case '%':
				  *buf++ = '%';
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	1c5a      	adds	r2, r3, #1
 80014fc:	60fa      	str	r2, [r7, #12]
 80014fe:	2225      	movs	r2, #37	; 0x25
 8001500:	701a      	strb	r2, [r3, #0]
				  break;
 8001502:	bf00      	nop
			}
			fmt++;
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	3301      	adds	r3, #1
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	e007      	b.n	800151c <ts_formatstring+0x10e>
		}
		/* Else just copy */
		else
		{
			*buf++ = *fmt++;
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	1c5a      	adds	r2, r3, #1
 8001510:	60fa      	str	r2, [r7, #12]
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	1c51      	adds	r1, r2, #1
 8001516:	60b9      	str	r1, [r7, #8]
 8001518:	7812      	ldrb	r2, [r2, #0]
 800151a:	701a      	strb	r2, [r3, #0]
	while(*fmt)
 800151c:	68bb      	ldr	r3, [r7, #8]
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	f47f af7d 	bne.w	8001420 <ts_formatstring+0x12>
		}
	}
	*buf = 0;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	701a      	strb	r2, [r3, #0]

	return (int)(buf - start_buf);
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	461a      	mov	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	1ad3      	subs	r3, r2, r3
}
 8001534:	4618      	mov	r0, r3
 8001536:	3720      	adds	r7, #32
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <ts_formatlength>:
**            format string and va_list va
**  Returns:  Maximum length
**---------------------------------------------------------------------------
*/
int ts_formatlength(const char *fmt, va_list va)
{
 800153c:	b480      	push	{r7}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	int length = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
	while (*fmt)
 800154a:	e081      	b.n	8001650 <ts_formatlength+0x114>
	{
		if (*fmt == '%')
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	2b25      	cmp	r3, #37	; 0x25
 8001552:	d177      	bne.n	8001644 <ts_formatlength+0x108>
		{
			++fmt;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3301      	adds	r3, #1
 8001558:	607b      	str	r3, [r7, #4]
			switch (*fmt)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	3b58      	subs	r3, #88	; 0x58
 8001560:	2b20      	cmp	r3, #32
 8001562:	d86a      	bhi.n	800163a <ts_formatlength+0xfe>
 8001564:	a201      	add	r2, pc, #4	; (adr r2, 800156c <ts_formatlength+0x30>)
 8001566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800156a:	bf00      	nop
 800156c:	0800162d 	.word	0x0800162d
 8001570:	0800163b 	.word	0x0800163b
 8001574:	0800163b 	.word	0x0800163b
 8001578:	0800163b 	.word	0x0800163b
 800157c:	0800163b 	.word	0x0800163b
 8001580:	0800163b 	.word	0x0800163b
 8001584:	0800163b 	.word	0x0800163b
 8001588:	0800163b 	.word	0x0800163b
 800158c:	0800163b 	.word	0x0800163b
 8001590:	0800163b 	.word	0x0800163b
 8001594:	0800163b 	.word	0x0800163b
 8001598:	080015f1 	.word	0x080015f1
 800159c:	080015ff 	.word	0x080015ff
 80015a0:	0800163b 	.word	0x0800163b
 80015a4:	0800163b 	.word	0x0800163b
 80015a8:	0800163b 	.word	0x0800163b
 80015ac:	0800163b 	.word	0x0800163b
 80015b0:	080015ff 	.word	0x080015ff
 80015b4:	0800163b 	.word	0x0800163b
 80015b8:	0800163b 	.word	0x0800163b
 80015bc:	0800163b 	.word	0x0800163b
 80015c0:	0800163b 	.word	0x0800163b
 80015c4:	0800163b 	.word	0x0800163b
 80015c8:	0800163b 	.word	0x0800163b
 80015cc:	0800163b 	.word	0x0800163b
 80015d0:	0800163b 	.word	0x0800163b
 80015d4:	0800163b 	.word	0x0800163b
 80015d8:	0800160d 	.word	0x0800160d
 80015dc:	0800163b 	.word	0x0800163b
 80015e0:	080015ff 	.word	0x080015ff
 80015e4:	0800163b 	.word	0x0800163b
 80015e8:	0800163b 	.word	0x0800163b
 80015ec:	0800162d 	.word	0x0800162d
			{
			  case 'c':
		  		  va_arg(va, int);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	3304      	adds	r3, #4
 80015f4:	603b      	str	r3, [r7, #0]
				  ++length;
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	3301      	adds	r3, #1
 80015fa:	60fb      	str	r3, [r7, #12]
				  break;
 80015fc:	e025      	b.n	800164a <ts_formatlength+0x10e>
			  case 'd':
			  case 'i':
			  case 'u':
				  /* 32 bits integer is max 11 characters with minus sign */
				  length += 11;
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	330b      	adds	r3, #11
 8001602:	60fb      	str	r3, [r7, #12]
				  va_arg(va, int);
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	3304      	adds	r3, #4
 8001608:	603b      	str	r3, [r7, #0]
				  break;
 800160a:	e01e      	b.n	800164a <ts_formatlength+0x10e>
			  case 's':
			  	  {
			  		  char * str = va_arg(va, char *);
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	1d1a      	adds	r2, r3, #4
 8001610:	603a      	str	r2, [r7, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60bb      	str	r3, [r7, #8]
			  		  while (*str++)
 8001616:	e002      	b.n	800161e <ts_formatlength+0xe2>
			  			  ++length;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	3301      	adds	r3, #1
 800161c:	60fb      	str	r3, [r7, #12]
			  		  while (*str++)
 800161e:	68bb      	ldr	r3, [r7, #8]
 8001620:	1c5a      	adds	r2, r3, #1
 8001622:	60ba      	str	r2, [r7, #8]
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b00      	cmp	r3, #0
 8001628:	d1f6      	bne.n	8001618 <ts_formatlength+0xdc>
			  	  }
				  break;
 800162a:	e00e      	b.n	800164a <ts_formatlength+0x10e>
			  case 'x':
			  case 'X':
				  /* 32 bits integer as hex is max 8 characters */
				  length += 8;
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3308      	adds	r3, #8
 8001630:	60fb      	str	r3, [r7, #12]
				  va_arg(va, unsigned int);
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	3304      	adds	r3, #4
 8001636:	603b      	str	r3, [r7, #0]
				  break;
 8001638:	e007      	b.n	800164a <ts_formatlength+0x10e>
			  default:
				  ++length;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	3301      	adds	r3, #1
 800163e:	60fb      	str	r3, [r7, #12]
				  break;
 8001640:	bf00      	nop
 8001642:	e002      	b.n	800164a <ts_formatlength+0x10e>
			}
		}
		else
		{
			++length;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	3301      	adds	r3, #1
 8001648:	60fb      	str	r3, [r7, #12]
		}
		++fmt;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	3301      	adds	r3, #1
 800164e:	607b      	str	r3, [r7, #4]
	while (*fmt)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	2b00      	cmp	r3, #0
 8001656:	f47f af79 	bne.w	800154c <ts_formatlength+0x10>
	}
	return length;
 800165a:	68fb      	ldr	r3, [r7, #12]
}
 800165c:	4618      	mov	r0, r3
 800165e:	3714      	adds	r7, #20
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <printf>:
**  Returns:  Number of bytes written
**
**===========================================================================
*/
int printf(const char *fmt, ...)
{
 8001668:	b40f      	push	{r0, r1, r2, r3}
 800166a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800166e:	b085      	sub	sp, #20
 8001670:	af00      	add	r7, sp, #0
	int length = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	60fb      	str	r3, [r7, #12]
	va_list va;
	va_start(va, fmt);
 8001676:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800167a:	603b      	str	r3, [r7, #0]
	length = ts_formatlength(fmt, va);
 800167c:	6839      	ldr	r1, [r7, #0]
 800167e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8001680:	f7ff ff5c 	bl	800153c <ts_formatlength>
 8001684:	60f8      	str	r0, [r7, #12]
	va_end(va);
	{
 8001686:	466b      	mov	r3, sp
 8001688:	461e      	mov	r6, r3
		char buf[length];
 800168a:	68f9      	ldr	r1, [r7, #12]
 800168c:	1e4b      	subs	r3, r1, #1
 800168e:	60bb      	str	r3, [r7, #8]
 8001690:	460b      	mov	r3, r1
 8001692:	461a      	mov	r2, r3
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	ea4f 09c3 	mov.w	r9, r3, lsl #3
 800169c:	ea49 7952 	orr.w	r9, r9, r2, lsr #29
 80016a0:	ea4f 08c2 	mov.w	r8, r2, lsl #3
 80016a4:	460b      	mov	r3, r1
 80016a6:	461a      	mov	r2, r3
 80016a8:	f04f 0300 	mov.w	r3, #0
 80016ac:	00dd      	lsls	r5, r3, #3
 80016ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80016b2:	00d4      	lsls	r4, r2, #3
 80016b4:	460b      	mov	r3, r1
 80016b6:	3307      	adds	r3, #7
 80016b8:	08db      	lsrs	r3, r3, #3
 80016ba:	00db      	lsls	r3, r3, #3
 80016bc:	ebad 0d03 	sub.w	sp, sp, r3
 80016c0:	466b      	mov	r3, sp
 80016c2:	3300      	adds	r3, #0
 80016c4:	607b      	str	r3, [r7, #4]
		va_start(va, fmt);
 80016c6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80016ca:	603b      	str	r3, [r7, #0]
		length = ts_formatstring(buf, fmt, va);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80016d2:	4618      	mov	r0, r3
 80016d4:	f7ff fe9b 	bl	800140e <ts_formatstring>
 80016d8:	60f8      	str	r0, [r7, #12]
		length = _write(1, buf, length);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	4619      	mov	r1, r3
 80016e0:	2001      	movs	r0, #1
 80016e2:	f7ff fcff 	bl	80010e4 <_write>
 80016e6:	60f8      	str	r0, [r7, #12]
 80016e8:	46b5      	mov	sp, r6
		va_end(va);
	}
	return length;
 80016ea:	68fb      	ldr	r3, [r7, #12]
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3714      	adds	r7, #20
 80016f0:	46bd      	mov	sp, r7
 80016f2:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016f6:	b004      	add	sp, #16
 80016f8:	4770      	bx	lr
	...

080016fc <__libc_init_array>:
 80016fc:	b570      	push	{r4, r5, r6, lr}
 80016fe:	4e0d      	ldr	r6, [pc, #52]	; (8001734 <__libc_init_array+0x38>)
 8001700:	4c0d      	ldr	r4, [pc, #52]	; (8001738 <__libc_init_array+0x3c>)
 8001702:	1ba4      	subs	r4, r4, r6
 8001704:	10a4      	asrs	r4, r4, #2
 8001706:	2500      	movs	r5, #0
 8001708:	42a5      	cmp	r5, r4
 800170a:	d109      	bne.n	8001720 <__libc_init_array+0x24>
 800170c:	4e0b      	ldr	r6, [pc, #44]	; (800173c <__libc_init_array+0x40>)
 800170e:	4c0c      	ldr	r4, [pc, #48]	; (8001740 <__libc_init_array+0x44>)
 8001710:	f000 f822 	bl	8001758 <_init>
 8001714:	1ba4      	subs	r4, r4, r6
 8001716:	10a4      	asrs	r4, r4, #2
 8001718:	2500      	movs	r5, #0
 800171a:	42a5      	cmp	r5, r4
 800171c:	d105      	bne.n	800172a <__libc_init_array+0x2e>
 800171e:	bd70      	pop	{r4, r5, r6, pc}
 8001720:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001724:	4798      	blx	r3
 8001726:	3501      	adds	r5, #1
 8001728:	e7ee      	b.n	8001708 <__libc_init_array+0xc>
 800172a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800172e:	4798      	blx	r3
 8001730:	3501      	adds	r5, #1
 8001732:	e7f2      	b.n	800171a <__libc_init_array+0x1e>
 8001734:	08001770 	.word	0x08001770
 8001738:	08001770 	.word	0x08001770
 800173c:	08001770 	.word	0x08001770
 8001740:	08001774 	.word	0x08001774
 8001744:	20434441 	.word	0x20434441
 8001748:	756c6156 	.word	0x756c6156
 800174c:	73692065 	.word	0x73692065
 8001750:	7525203a 	.word	0x7525203a
 8001754:	00000a20 	.word	0x00000a20

08001758 <_init>:
 8001758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800175a:	bf00      	nop
 800175c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800175e:	bc08      	pop	{r3}
 8001760:	469e      	mov	lr, r3
 8001762:	4770      	bx	lr

08001764 <_fini>:
 8001764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001766:	bf00      	nop
 8001768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800176a:	bc08      	pop	{r3}
 800176c:	469e      	mov	lr, r3
 800176e:	4770      	bx	lr
